import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = '7578554558:AAGwtDOYQWbw7b1axbhSfXYs0ttgTnawkOM'
SUPPORT_CHAT_ID = -1002764789009  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
        "–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ *–ó–≤—ë–∑–¥–Ω—ã–π –î–≤–æ–π–Ω–∏–∫*.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º.",
        reply_markup=kb
    )

# === –ö–æ–º–∞–Ω–¥–∞ /–æ—Ç–≤–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ===
@dp.message(Command("–æ—Ç–≤–µ—Ç"))
async def reply_to_user(message: types.Message):
    try:
        parts = message.text.strip().split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–æ—Ç–≤–µ—Ç user_id —Ç–µ–∫—Å—Ç")
            return

        user_id = int(parts[1])
        reply_text = parts[2]

        await bot.send_message(
            user_id,
            f"üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n{reply_text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# === –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ" ===
@dp.message(F.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
async def leave_request(message: types.Message):
    await message.answer("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await bot.send_message(
        SUPPORT_CHAT_ID,
        f"üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–ë–µ–∑ username'} (ID: {message.from_user.id}) –Ω–∞—á–∞–ª –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
    )

# === –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è ===
@dp.message()
async def handle_request(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ë–µ–∑ username'
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()

    await bot.send_message(
        SUPPORT_CHAT_ID,
        f"üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n"
        f"üë§ –ò–º—è: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üîó Username: @{username}\n"
        f"üÜî Chat ID: {user_id}\n"
        f"üí¨ –¢–µ–∫—Å—Ç: {message.text}"
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
