#!/usr/bin/env python
# coding: utf-8

# In[ ]:

from astrology_module import get_astrology_text_for_date
import asyncio
import json
import locale
import logging
import random
import re
import sqlite3
import time
from datetime import datetime, timedelta
import threading
import requests
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)
from telegram import ReplyKeyboardRemove
from astrology_module import generate_chart_image
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import BotCommand, MenuButtonCommands
import psycopg2
from telegram.ext import CallbackQueryHandler
from telegram.ext import Application
from simple_calendar import SimpleCalendar, calendar_handler
import os
from dotenv import load_dotenv


load_dotenv()

# –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
proxies = {
    "http": None,
    "https": None,
}
logging.basicConfig(level=logging.INFO)

ASK_NAME, ASK_BIRTHDATE, ASK_BIRTHPLACE, ASK_BIRTHTIME, ASK_VIP_DATE, WAIT_ANSWER, CONFIRM_RESET = range(7)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
cancel_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True
)
back_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–ù–∞–∑–∞–¥")], [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True
)
menu_keyboard = ReplyKeyboardMarkup(
    [
        [   KeyboardButton("üîÆ–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            KeyboardButton("‚ù§Ô∏è–£–∑–Ω–∞—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        ],
        [KeyboardButton("üìÖ‚ú®–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–æ–±—ã—Ç–∏—é")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [KeyboardButton("üß†üåå–ó–≤–µ–∑–¥–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–µ—Ä—Ç")],
        [KeyboardButton("üë§‚≠ê–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")],
    ],
    resize_keyboard=True,
)

def load_static_data():
    global ZODIAC_SIGNS, CHINESE_SIGNS, emoji_dict, zodiac_emojis, chinese_emojis

    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ó–∞–≥—Ä—É–∑–∫–∞ ZODIAC_SIGNS
    cursor.execute("SELECT cutoff_date, name FROM zodiac_signs ORDER BY cutoff_date")
    ZODIAC_SIGNS = cursor.fetchall()  # [(120, "–ö–æ–∑–µ—Ä–æ–≥"), (218, "–í–æ–¥–æ–ª–µ–π"), ...]

    # –ó–∞–≥—Ä—É–∑–∫–∞ CHINESE_SIGNS
    cursor.execute("SELECT name FROM chinese_signs ORDER BY id")
    CHINESE_SIGNS = [row[0] for row in cursor.fetchall()]

    # –ó–∞–≥—Ä—É–∑–∫–∞ emoji_dict
    cursor.execute("SELECT keyword, emoji FROM emoji_mapping")
    rows = cursor.fetchall()
    emoji_dict = {}
    for keyword, emoji in rows:
        emoji_dict.setdefault(keyword, []).append(emoji)

    # –ó–∞–≥—Ä—É–∑–∫–∞ zodiac_emojis
    cursor.execute("SELECT form, emoji FROM zodiac_emojis")
    zodiac_emojis = dict(cursor.fetchall())

    # –ó–∞–≥—Ä—É–∑–∫–∞ chinese_emojis
    cursor.execute("SELECT form, emoji FROM chinese_emojis")
    chinese_emojis = dict(cursor.fetchall())

    conn.close()
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


def get_pg_connection():
    db_url = os.getenv("ASTROLOG_DB")
    if db_url is None:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ASTROLOG_DB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    return psycopg2.connect(db_url)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="/Users/denissilyakov/Astrolog/bot/astro_bot.log",  # –ü—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format="%(asctime)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    encoding="utf-8",  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
)

def save_conversation_context(user_id, context):
    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if isinstance(context, str):
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        context = [int(x.strip()) for x in context.strip('[]').split(',') if x.strip().isdigit()]

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
    if len(context) > 1000:
        context = context[-1000:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ç–æ–∫–µ–Ω–æ–≤

    cursor.execute("""
        INSERT INTO user_conversations (user_id, context, timestamp)
        VALUES (%s, %s, %s)
    """, (user_id, json.dumps(context, ensure_ascii=False), datetime.now()))
    
    conn.commit()
    conn.close()


def get_conversation_context(user_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute("""
    SELECT context FROM user_conversations WHERE user_id = %s
    ORDER BY timestamp DESC LIMIT 1
    """, (user_id,))

    context_data = cursor.fetchall()
    conn.close()

    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –µ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if context_data:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        context = []
        for row in context_data:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
            context_values = row[0].strip('[]').split(',')  # —É–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–≤ –∏—Ö –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            context.extend([int(value.strip()) for value in context_values if value.strip().isdigit()])
        return context  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    else:
        return []  # –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_questions(chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
        SELECT question, options, options_position, chain_order FROM question_chains
        WHERE chain_id = %s
        ORDER BY chain_order
        """,
        (chain_id,),
    )

    questions = cursor.fetchall()
    conn.close()
    return questions



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏–∏
def get_dynamic_menu_buttons(menu_chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT button_name, button_action, position FROM dynamic_menu WHERE menu_chain_id = %s
    ORDER BY position
    """, (menu_chain_id,)
    )
    buttons = cursor.fetchall()

    conn.close()
    return buttons

async def user_wait_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text.strip()
    question_step = context.user_data["question_step"]
    chain_id = context.user_data.get("chain_id")
    
    if update.message.text.strip() == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, context)
        return ConversationHandler.END


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è event_answers, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "event_answers" not in context.user_data:
        context.user_data["event_answers"] = {}

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ø–æ—á–∫–∏
    questions = get_questions(chain_id)
    current_question = questions[question_step]

    
    options_str = current_question[1]
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º options –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    context.user_data["current_options_str"] = options_str

    # ‚û°Ô∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    if options_str:
        if "DATE" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime.now() + timedelta(days=1),
                max_date=None
            )
            await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER

        if "PASTDT" in options_str:
            calendar = SimpleCalendar(
                min_date=None,
                max_date=datetime.now() - timedelta(days=1)
            )
            await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER

        if "BIRTHDT" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime(1925, 1, 1),
                max_date=datetime(2015, 12, 31)
            )
            await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if user_answer == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["question_step"] = 0
        context.user_data["event_answers"]= {}
        question_step = 0
        await show_menu(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATE –≤ options
    if options_str and "DATE" in options_str:
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date <= datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PASTDT –≤ options
    if options_str and "PASTDT" in options_str:
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date > datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BIRHDATE –≤ options
    if options_str and "BIRTHDT" in options_str:
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date > datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        zodiac, chinese = get_zodiac_and_chinese_sign(user_answer)
        
        
        context.user_data["bdate_zodiac"] = zodiac
        context.user_data["bdate_chinese"] = chinese

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data["event_answers"][question_step] = user_answer
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DATE/PASTDT/BIRTHDT
    if options_str and any(opt in options_str for opt in ["DATE", "PASTDT", "BIRTHDT"]):
        if "planets_info_counter" not in context.user_data:
            context.user_data["planets_info_counter"] = 0
        else:
            context.user_data["planets_info_counter"] += 1

        planets_key = f"planets_info_{context.user_data['planets_info_counter']}"

        planets_info = get_astrology_text_for_date(
            user_answer,
            time_str="12:00",
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0)
        )
        context.user_data[planets_key] = planets_info


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
    save_answer_to_db(
        update.effective_user.id,
        context.user_data["chain_id"],
        question_step,
        user_answer,
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    context.user_data["question_step"] += 1

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    if context.user_data["question_step"] >= len(questions):
        await generate_forecasts_from_chain(update, context)
        return ConversationHandler.END

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    return await ask_question(update, context)


def save_user_data(user_id, data):
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO users (
            user_id, name, birthdate, gender, zodiac,
            chinese_year, birthplace, tz_offset, birthtime, chat_id
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (user_id) DO UPDATE SET
            name = EXCLUDED.name,
            birthdate = EXCLUDED.birthdate,
            gender = EXCLUDED.gender,
            zodiac = EXCLUDED.zodiac,
            chinese_year = EXCLUDED.chinese_year,
            birthplace = EXCLUDED.birthplace,
            tz_offset = EXCLUDED.tz_offset,
            birthtime = EXCLUDED.birthtime,
            chat_id = EXCLUDED.chat_id
        """,
        (
            user_id,
            data.get("name"),
            data.get("birthdate"),
            data.get("gender"),
            data.get("zodiac"),
            data.get("chinese_year"),
            data.get("birthplace"),
            data.get("tz_offset"),
            data.get("birthtime"),
            data.get("chat_id"),  # <--- –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        ),
    )

    conn.commit()
    conn.close()



def load_user_data(user_id):
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT name, birthdate, gender, zodiac,
               chinese_year, birthplace, tz_offset, birthtime, chat_id
        FROM users WHERE user_id = %s
        """,
        (user_id,),
    )
    row = cursor.fetchone()
    conn.close()

    if row:
        return {
            "name": row[0],
            "birthdate": row[1],
            "gender": row[2],
            "zodiac": row[3],
            "chinese_year": row[4],
            "birthplace": row[5],
            "tz_offset": row[6],
            "birthtime": row[7],
            "chat_id": row[8],   # <--- —á–∏—Ç–∞–µ–º chat_id
        }
    return {}


def decorate_with_emojis(text: str) -> str:
    words = re.findall(r"\w+", text.lower())
    matched_emojis = []
    used_emojis = set()

    for word in words:
        for key in emoji_dict:
            if key in word:
                emojis = [e for e in emoji_dict[key] if e not in used_emojis]
                if emojis:
                    emoji = random.choice(emojis)
                    matched_emojis.append((word, emoji))
                    used_emojis.add(emoji)
                    break

    all_zodiacs = "|".join(re.escape(k) for k in zodiac_emojis)
    all_chinese = "|".join(re.escape(k) for k in chinese_emojis)
    zodiac_pattern = re.compile(r"\b(" + all_zodiacs + r")\b")
    chinese_pattern = re.compile(r"\b(" + all_chinese + r")\b")

    def insert_zodiac_emoji(match):
        return f"{match.group(0)} {zodiac_emojis[match.group(0)]}"

    def insert_chinese_emoji(match):
        return f"{match.group(0)} {chinese_emojis[match.group(0)]}"

    text = zodiac_pattern.sub(insert_zodiac_emoji, text)
    text = chinese_pattern.sub(insert_chinese_emoji, text)

    if not matched_emojis:
        return text

    sentences = re.split(r"(?<=[.!?])\s+", text)
    for i, sentence in enumerate(sentences):
        inserted = 0
        for word, emoji in matched_emojis:
            if inserted >= 3:
                break
            if word in sentence.lower() and emoji not in sentence:
                pattern = re.compile(r"\b" + re.escape(word) + r"\b", re.IGNORECASE)
                sentence = pattern.sub(
                    lambda m: m.group(0) + f" {emoji}", sentence, count=1
                )
                inserted += 1
        sentences[i] = sentence

    return " ".join(sentences)


def get_zodiac_and_chinese_sign(birthdate: str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å
    day, month, year = map(int, birthdate.split("."))
    mmdd = int(f"{month:02}{day:02}")  # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–¥–¥
    zodiac = next(sign for cutoff, sign in ZODIAC_SIGNS if mmdd <= cutoff)
    chinese = CHINESE_SIGNS[(year - 1900) % 12]
    return zodiac, chinese


async def detect_gender(name: str) -> str:

    payload = {
        "model": "gemma3:latest",
        "prompt": f"–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏: {name}. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π.",
        "stream": False,
        "temperature": 0.5,
        "system": "–¢—ã –ª–∏–Ω–≥–≤–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π.",
    }
    try:
        res = requests.post("http://localhost:11434/api/generate", json=payload, proxies=proxies)
        answer = res.json().get("response", "").strip().lower()
        return "–∂–µ–Ω—Å–∫–∏–π" if "–∂–µ–Ω" in answer else "–º—É–∂—Å–∫–æ–π"
    except:
        return "–º—É–∂—Å–∫–æ–π"

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
async def warm_up_model():
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        payload = {
            "model": "gemma3:latest",
            "prompt": "–†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏",
            "stream": False,
            "temperature": 0.7,
            "system": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞"
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        response = requests.post("http://localhost:11434/api/generate", json=payload, proxies=proxies)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            logging.info("–ú–æ–¥–µ–ª—å —Ä–∞–∑–æ–≥—Ä–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏: {response.status_code}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏: {e}")



# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logging.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–∞.")
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id
    chat_id = message.chat_id
    context.user_data["chat_id"] = chat_id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_user_data(user_id)
    if user_data:
        context.user_data.update(user_data)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    context.user_data.setdefault("question_step", 0)
    context.user_data.setdefault("event_answers", {})
    context.user_data.setdefault("chain_id", 1)
    context.user_data.setdefault("question_chain_id", 1)

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–∞–Ω–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–µ—Ç —Ä–∞—Å—á—ë—Ç–æ–≤
    if "birthdate" in context.user_data and "user_planets_info" not in context.user_data:
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
            context.user_data["birthdate"],
            time_str=context.user_data.get("birthtime", "12:00"),
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0)
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    if "name" in context.user_data and "birthdate" in context.user_data:
        await message.reply_text(
            "üëã –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=menu_keyboard,
        )
        return ConversationHandler.END

    # –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
    await message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Å—Ç—Ä–æ–¢–≤–∏–Ω–∑!\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –Ω–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_NAME




# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def reset_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–£–≤–µ—Ä–µ–Ω")], [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
        ),
    )
    return CONFIRM_RESET

async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if "—É–≤–µ—Ä–µ–Ω" in text:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î
        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM user_conversations WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM forecasts WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
        conn.commit()
        conn.close()

        context.user_data.clear()
        
        context.user_data["chat_id"] = update.effective_chat.id
        await update.message.reply_text(
            "üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NAME

    elif "–æ—Ç–º–µ–Ω" in text:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–£–≤–µ—Ä–µ–Ω¬ª –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.")
        return CONFIRM_RESET


# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["name"] = name
    gender = await detect_gender(name)
    context.user_data["gender"] = gender
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}. –¢–≤–æ–π –ø–æ–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ {gender}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14.02.1978):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_BIRTHDATE


# –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã
    normalized_date = normalize_and_validate_date(text)

    if normalized_date:
        context.user_data["birthdate"] = normalized_date
        zodiac, chinese = get_zodiac_and_chinese_sign(normalized_date)
        context.user_data["zodiac"] = zodiac
        context.user_data["chinese_year"] = chinese
        save_user_data(user_id, context.user_data)
        
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
        normalized_date,
        time_str=context.user_data.get("birthtime", "12:00"),
        mode="model",
        tz_offset=context.user_data.get("tz_offset", 0)
        )

        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}, –í–æ—Å—Ç–æ—á–Ω—ã–π –∑–Ω–∞–∫: {chinese}.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await update.message.reply_text(
            "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: –¥–µ—Ä–µ–≤–Ω—è –õ–∞–∑—É—Ä–Ω–∞—è, –ö–æ–Ω–∞–∫–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ASK_BIRTHPLACE
    else:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.1990."
        )
        return ASK_BIRTHDATE



async def detect_timezone_offset(location: str) -> int:
    payload = {
        "model": "gemma3:latest",
        "prompt": f"–û–ø—Ä–µ–¥–µ–ª–∏ —á–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +3 –∏–ª–∏ -5) –ø–æ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {location}. –û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º ‚Äî —Ü–µ–ª—ã–º —Å –ø–ª—é—Å–æ–º –∏–ª–∏ –º–∏–Ω—É—Å–æ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.",
        "stream": False,
        "temperature": 0.3,
        "system": "–¢—ã –≥–µ–æ–≥—Ä–∞—Ñ. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º: –Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –∏–ª–∏ -5.",
    }
    try:
        res = requests.post("http://localhost:11434/api/generate", json=payload, proxies=proxies)
        answer = res.json().get("response", "").strip()
        match = re.match(r"[+-]?\d+", answer)
        return int(match.group(0)) if match else 0
    except:
        return 0

async def get_birthplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    place = update.message.text.strip()
    context.user_data["birthplace"] = place

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    tz_offset = await detect_timezone_offset(place)
    context.user_data["tz_offset"] = tz_offset

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ –≤ –º–µ—Å—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è: UTC{'+' if tz_offset >= 0 else ''}{tz_offset}",
        reply_markup=ReplyKeyboardRemove(),
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    await update.message.reply_text(
        "üï∞Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú), –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30.\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–ù–µ –∑–Ω–∞—é")]], resize_keyboard=True
        ),
    )
    return ASK_BIRTHTIME



# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def forecast_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tomorrow = datetime.now() + timedelta(days=1)
    context.user_data["forecast_date"] = tomorrow.strftime("%d.%m.%Y")
    context.user_data["chain_id"] = 10

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ
    context.user_data["question_step"] = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return await ask_question(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤


# VIP-–¥–∞—Ç–∞
async def ask_vip_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    buttons = get_dynamic_menu_buttons(2)

    if not buttons:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END



# –ò—Å—Ç–æ—Ä–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    buttons = get_dynamic_menu_buttons(4)

    if not buttons:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END


async def history_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    page = context.user_data.get("history_page", 0)
    if "–≤–ø–µ—Ä—ë–¥" in text:
        context.user_data["history_page"] = page + 1
    elif "–Ω–∞–∑–∞–¥" in text:
        context.user_data["history_page"] = max(0, page - 1)
    return await show_history(update, context)


# –ú–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–∞
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåå –î–æ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏!", reply_markup=menu_keyboard
    )
    return ConversationHandler.END


# –ü–æ–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤ –ë–î –ø—Ä–æ–≥–Ω–æ–∑–∞
async def show_saved_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    forecast_date = context.user_data.get("forecast_date")
    aspect = context.user_data.get("aspect")

    if not forecast_date or not aspect:
        await update.message.reply_text(
            "–ù–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )
        return ConversationHandler.END

    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT text FROM forecasts 
        WHERE user_id = %s AND forecast_date = %s AND aspect = %s
    """,
        (user_id, forecast_date, aspect),
    )
    row = cursor.fetchone()
    conn.close()

    if row:
        decorated = decorate_with_emojis(row[0])
        await update.message.reply_text(
            f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_date} ({aspect}):\n\n{decorated}"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
    return ConversationHandler.END



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
def create_dynamic_keyboard(buttons):
    keyboard = []
    current_row = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
    last_position = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏

    for button_name, button_action, position in buttons:
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ current_row –Ω–µ –ø—É—Å—Ç, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä—è–¥ –≤ keyboard
        if position != last_position and current_row:
            keyboard.append(current_row)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä—è–¥
            current_row = []  # –ù–æ–≤—ã–π —Ä—è–¥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
        current_row.append(KeyboardButton(button_name))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        last_position = position

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
    if current_row:
        keyboard.append(current_row)

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chain_id –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_chain_id_for_button(button_action):
    print("Button Action")
    print((button_action))
    
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT chain_id FROM dynamic_menu
    WHERE button_action = %s
    """,
        (button_action,),
    )

    result = cursor.fetchone()
    conn.close()
    print("get_chain_id_for_button, chain_id")
    print(result)
    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π chain_id
    return None  # –ï—Å–ª–∏ chain_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
async def handle_dynamic_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é. –ü–æ–ª—É—á–∞–µ—Ç chain_id –∫–Ω–æ–ø–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ user_data,
    #–µ—Å–ª–∏ chain_id –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤.
    
    button_action = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: {button_action}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º chain_id –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    
    
    
    chain_id = get_chain_id_for_button(button_action)
    print("handle_dynamic_button, chain_id, button_action")
    print(chain_id)
    print(button_action)

    if chain_id is None:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞! –î–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º chain_id –≤ user_data
    context.user_data["chain_id"] = chain_id

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ
    context.user_data["question_step"] = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return await ask_question(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤


# –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è generate_detailed_forecast
async def generate_detailed_forecast(
    update: Update, context: ContextTypes.DEFAULT_TYPE, prompt, tone, temperature
):
    user_id = update.effective_user.id
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–µ
    prompt = replace_variables_in_prompt(prompt, context)
    
        # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    await update.message.reply_text(
        "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    conversation_context = get_conversation_context(user_id)

    payload = {
        "model": "gemma3:latest",
        "prompt": prompt,
        "stream": True,
        "temperature": temperature,
        "system": tone
    }
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if conversation_context != '[]':
        payload["context"] = conversation_context

    print(payload) #–û–¢–õ–ê–î–ö–ê
    typing_msg = await update.message.reply_text("‚Ä¶")
    try:
        response = requests.post(
            "http://localhost:11434/api/generate", json=payload, stream=True, proxies=proxies
        )
        astro_text = ""
        buffer = ""
        first = True

        for line in response.iter_lines(decode_unicode=True):
            if line.strip():
                part = json.loads(line)
                chunk = part.get("response", "")
                if chunk:
                    astro_text += chunk
                    buffer += chunk

                    if "\n" in buffer:
                        parts = buffer.split("\n")
                        for para in parts[:-1]:
                            clean_para = para.strip()
                            if clean_para:
                                decorated = decorate_with_emojis(clean_para)
                                if first:
                                    await typing_msg.edit_text(decorated)
                                    first = False
                                else:
                                    msg = await context.bot.send_message(
                                        chat_id=update.effective_chat.id, text="‚Ä¶"
                                    )
                                    delay = len(clean_para.split()) * 0.2
                                    await asyncio.sleep(delay)
                                    await msg.edit_text(decorated)
                        buffer = parts[-1]

        last_para = buffer.strip()
        if last_para:
            decorated = decorate_with_emojis(last_para)
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id, text="‚Ä¶"
            )
            delay = len(last_para.split()) * 0.2
            await asyncio.sleep(delay)
            await msg.edit_text(decorated)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO forecasts (user_id, forecast_date, aspect, forecast_text)
            VALUES (%s, %s, %s, %s)
        """,
            (
                user_id,
                datetime.now().strftime("%d %B %Y –≥–æ–¥–∞"),
                "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–æ–±—ã—Ç–∏—é",
                astro_text,
            ),
        )
        cursor.connection.commit()
        

        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        new_context = part["context"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_conversation_context(user_id,  new_context)

        # await update.message.reply_text(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {datetime.now().strftime('%d %B %Y –≥–æ–¥–∞')}:\n\n{astro_text}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–æ–±—ã—Ç–∏—é"
async def detailed_vip_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    buttons = get_dynamic_menu_buttons(3)

    if not buttons:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ø–æ—á–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    chain_id = context.user_data.get("chain_id")

    if not chain_id:
        await message.reply_text("–û—à–∏–±–∫–∞! –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return ConversationHandler.END

    questions = get_questions(chain_id)
    if not questions:
        await message.reply_text("–û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    question_step = context.user_data.get("question_step", 0)
    current_question = questions[question_step]
    question_text = current_question[0]
    options_str = current_question[1]
    options_position_str = current_question[2]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–ø—Ü–∏–∏
    try:
        options = json.loads(options_str) if options_str else []
    except json.JSONDecodeError:
        options = []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
    try:
        options_positions = json.loads(options_position_str) if options_position_str else []
    except json.JSONDecodeError:
        options_positions = []

    logging.info(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question_text}")
    logging.info(f"–û–ø—Ü–∏–∏: {options}")
    logging.info(f"–ü–æ–∑–∏—Ü–∏–∏: {options_positions}")


    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∑–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    special_inputs = {"DATE", "PASTDT", "BIRTHDT"}
    if any(opt in special_inputs for opt in options):
        context.user_data["current_options_str"] = options_str

        calendar = None
        if "DATE" in options_str:
            calendar = SimpleCalendar(min_date=datetime.now() + timedelta(days=1))
        elif "PASTDT" in options_str:
            calendar = SimpleCalendar(max_date=datetime.now() - timedelta(days=1))
        elif "BIRTHDT" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime(1925, 1, 1),
                max_date=datetime(2015, 12, 31),
                center_year=2000
            )


        if calendar:
            await message.reply_text(
                "‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            await message.reply_text(
                question_text,
                reply_markup=calendar.build_year_selection()
            )
            return WAIT_ANSWER


    # –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    if not options:
        await message.reply_text(
            f"{question_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
        )
        return WAIT_ANSWER

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if options_positions and len(options) == len(options_positions):
        grouped = {}
        for opt, pos in zip(options, options_positions):
            grouped.setdefault(pos, []).append(KeyboardButton(opt))
        keyboard = [grouped[k] for k in sorted(grouped)]
    else:
        # fallback ‚Äî –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard = [[KeyboardButton(opt) for opt in options]]

    keyboard.append([KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await message.reply_text(question_text, reply_markup=markup)
    return WAIT_ANSWER



    # –ï—Å–ª–∏ –æ–ø—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    if not options:
        await update.message.reply_text(
            f"{question_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
        )
        return WAIT_ANSWER

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if options_positions and len(options) == len(options_positions):
        grouped = {}
        for opt, pos in zip(options, options_positions):
            grouped.setdefault(pos, []).append(KeyboardButton(opt))
        keyboard = [grouped[k] for k in sorted(grouped)]
    else:
        # fallback ‚Äî –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard = [[KeyboardButton(opt) for opt in options]]

    keyboard.append([KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(question_text, reply_markup=markup)
    return WAIT_ANSWER




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã question_chain_prompts
def get_question_chain_prompts(chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT prompt, tone, temperature, chain_order FROM question_chain_prompts
    WHERE chain_id = %s
    ORDER BY chain_order
    """,
        (chain_id,),
    )

    prompts = cursor.fetchall()

    conn.close()
    return prompts


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ø–æ—á–∫–∏
async def generate_forecasts_from_chain(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    # –ü–æ–ª—É—á–∞–µ–º chain_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chain_id = context.user_data.get("chain_id")

    if not chain_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ —É–∫–∞–∑–∞–Ω chain_id.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∑–Ω–∞—á–µ–Ω–∏–π prompt, tone, temperature –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    prompts = get_question_chain_prompts(chain_id)

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ prompt, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_detailed_forecast
    for prompt, tone, temperature, _ in prompts:
        await generate_detailed_forecast(update, context, prompt, tone, temperature)
        
    keyboard = [
        [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_reply_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "üîî –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üîî ‚Äî –∞ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –µ—â—ë –±–æ–ª—å—à–µ? ‚ú® –ü–æ–≥—Ä—É–∑–∏—Å—å –≥–ª—É–±–∂–µ –≤ —Ç–∞–π–Ω—ã —Å–≤–æ–µ–π —Å—É–¥—å–±—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ‚ú®\"–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫\" ü™û ‚Äî —Ç–∞–º —Ç–µ–±—è –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ä–µ–¥–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞!"
    , reply_markup=menu_keyboard
    )

    return ConversationHandler.END

def replace_variables_in_prompt(prompt, context):
    chain_id = context.user_data.get("chain_id")
    if chain_id:
        collect_questions_for_chain(context, chain_id)

    logging.info(f"Event Questions: {context.user_data.get('event_questions')}")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    variables = {
        "{name}": context.user_data.get("name", ""),
        "{birthdate}": context.user_data.get("birthdate", ""),
        "{zodiac}": context.user_data.get("zodiac", ""),
        "{chinese_year}": context.user_data.get("chinese_year", ""),
        "{gender}": context.user_data.get("gender", ""),
        "{forecast_date}": context.user_data.get("forecast_date", ""),
        "{bdate_zodiac}": context.user_data.get("bdate_zodiac", ""),
        "{bdate_chinese}": context.user_data.get("bdate_chinese", ""),
        "{user_planets_info}": context.user_data.get("user_planets_info", ""),
    }

    # --- –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º forecast_date –¥–ª—è –ø–ª–∞–Ω–µ—Ç ---
    forecast_date_str = context.user_data.get("forecast_date")
    if forecast_date_str:
        forecast_date_for_planets = context.user_data.get("forecast_date")
        if forecast_date_for_planets:
            if "planets_info_fd" not in context.user_data:
                planets_info_fd = get_astrology_text_for_date(
                    forecast_date_for_planets,
                    time_str="12:00",
                    mode="model",
                    tz_offset=context.user_data.get("tz_offset", 0)
                )
                context.user_data["planets_info_fd"] = planets_info_fd

            variables["{planets_info_fd}"] = context.user_data.get("planets_info_fd", "")

    # --- –ó–∞–º–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
    for key, value in variables.items():
        prompt = prompt.replace(key, value)

    # --- –ó–∞–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    for step in range(len(context.user_data.get("event_questions", []))):
        question = context.user_data["event_questions"][step]
        prompt = prompt.replace(f"{question_key(step)}", question)

    # --- –ó–∞–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
    for step, answer in context.user_data.get("event_answers", {}).items():
        prompt = prompt.replace(f"{answer_key(step)}", answer)

    # --- –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º planets_info_N ---
    for step in range(0, context.user_data.get("planets_info_counter", -1) + 1):
        planets_key = f"planets_info_{step}"
        planets_info = context.user_data.get(planets_key, "")
        prompt = prompt.replace(f"{{{planets_key}}}", planets_info)

    prompt = prompt.replace("{", "").replace("}", "")
    return prompt



    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∫–∞–∫ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞. –ó–∞–º–µ–Ω–∏–º –∏—Ö –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
    #prompt = prompt.replace("{", "").replace("}", "")



def collect_questions_for_chain(context, chain_id):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –ø–æ chain_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
    –≤ context.user_data['event_questions']. –í–æ–ø—Ä–æ—Å—ã –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è —Å 0.

    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ get_questions(chain_id) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    (question_text, options, options_position, chain_order)
    """
    questions = get_questions(chain_id)

    if not questions:
        logging.error(f"–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Å chain_id {chain_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ chain_order (4-–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî x[3])
    try:
        sorted_questions = sorted(questions, key=lambda x: int(x[3]))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        sorted_questions = questions  # fallback ‚Äî –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    event_questions = {
        index: q[0] for index, q in enumerate(sorted_questions)
    }

    context.user_data["event_questions"] = event_questions
    logging.info(
        f"–°–æ–±—Ä–∞–Ω–æ {len(event_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Å chain_id {chain_id}."
    )



def answer_key(step):
    # –≠—Ç–æ –±—É–¥–µ—Ç {answer_1}, {answer_2} –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    return f"answer_{step}"


def question_key(step):
    # –≠—Ç–æ –±—É–¥–µ—Ç {questions_1}, {questions_2} –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    return f"question_{step}"


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
def save_answer_to_db(user_id, chain_id, question_step, answer):
    retries = 5
    for attempt in range(retries):
        try:
            conn = get_pg_connection()
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT INTO question_chain_answers (user_id, chain_id, question_step, answer)
                VALUES (%s, %s, %s, %s)
            """,
                (user_id, chain_id, question_step, answer),
            )
            conn.commit()
            conn.close()
            break
        except sqlite3.OperationalError as e:
            if attempt < retries - 1:
                time.sleep(1)  # –û–∂–∏–¥–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")
                raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
def is_valid_date(date_str: str) -> bool:
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
def normalize_and_validate_date(date_str: str) -> str:
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for fmt in (
        "%d.%m.%Y",
        "%d-%m-%Y",
        "%d/%m/%Y",
    ):  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        try:
            date_object = datetime.strptime(date_str, fmt)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥
            return date_object.strftime("%d.%m.%Y")
        except ValueError:
            pass  # –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def handle_main_menu(update, context):
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if update.message.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, context)

def run_model_warmup_in_thread():
    asyncio.run(warm_up_model())

async def get_birthtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text.lower() == "–Ω–µ –∑–Ω–∞—é":
        birthtime = "12:00"
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.strptime(text, "%H:%M")
            birthtime = text
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª"
            )
            return ASK_BIRTHTIME

    context.user_data["birthtime"] = birthtime

    await update.message.reply_text(
        f"–ü—Ä–∏–Ω—è—Ç–æ. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birthtime}",
        reply_markup=menu_keyboard
    )

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–ª–∞–Ω–µ—Ç (—Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
    planet_text = get_astrology_text_for_date(
        context.user_data["birthdate"],
        time_str=context.user_data.get("birthtime", "12:00"),
        mode="pretty",
        tz_offset=context.user_data.get("tz_offset", 0)
    )
    await update.message.reply_text(f"–ö–∞—Ä—Ç–∞ –ø–ª–∞–Ω–µ—Ç: {planet_text}")
    
    await update.message.reply_text(f"–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    buf = generate_chart_image(context.user_data["birthdate"], birthtime, context.user_data.get("tz_offset", 0), context.user_data["name"])
    await update.message.reply_photo(photo=buf, caption="üåå –¢–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")

    save_user_data(user_id, context.user_data)
    return ConversationHandler.END

async def set_menu(application):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å üöÄ"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã"),
        BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å üë§"),
        BotCommand("help", "–ü–æ–º–æ—â—å ‚ùì")
    ])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands()
    )

async def setup(application):
    await set_menu(application)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–µ ¬´–ó–≤–µ–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫¬ª.\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ."
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = load_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    name = user_data.get("name", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthdate = user_data.get("birthdate", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthplace = user_data.get("birthplace", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    tz_offset = user_data.get("tz_offset", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    tz_offset_formatted = f"UTC{tz_offset:+}" if tz_offset is not None else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"

    profile_text = (
        "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"‚Ä¢ –ò–º—è: {name}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ –≤ –º–µ—Å—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {tz_offset_formatted}"
    )

    await update.message.reply_text(profile_text)

def get_all_chat_ids():
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM users WHERE chat_id IS NOT NULL")
    chat_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return chat_ids

async def send_update_notification_to_all_chats(application):
    chat_ids = get_all_chat_ids()
    notification_text = (
        "üì¢ –î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n\n"
        "–ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª –µ—â—ë –ª—É—á—à–µ üåü\n"
        "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="/start")]
    ])
    for chat_id in chat_ids:
        try:
            await application.bot.send_message(
                chat_id=chat_id,
                text=notification_text,
                reply_markup=keyboard
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")


async def handle_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
    await start(update, context)

async def send_start_on_launch(app: Application):
    await send_update_notification_to_all_chats(app)

async def full_post_init(application):
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    await setup(application)
    # –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_start_on_launch(application)


# –ó–∞–ø—É—Å–∫
def main():
    
    
    load_static_data()  # <--- –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ë–î
    
    # --- –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling --- –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏
    async def startup_tasks():
        await send_update_notification_to_all_chats(app)
    
    app = (
        ApplicationBuilder()
        .token(os.getenv("ASTROLOG_BOT"))
        .post_init(full_post_init)  # <<< –í–û–¢ –¢–£–¢ –î–û–ë–ê–í–õ–Ø–ï–ú
        .build()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ bot_data –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    app.bot_data["save_answer_to_db"] = save_answer_to_db
    app.bot_data["ask_question"] = ask_question

    # –ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    threading.Thread(target=run_model_warmup_in_thread).start()
    
    

    # –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler
    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞$"), forecast_tomorrow
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–£–∑–Ω–∞—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏$"), ask_vip_date
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ$"), reset_user_data
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–æ–±—ã—Ç–∏—é$"),
                detailed_vip_forecast,
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ó–≤–µ–∑–¥–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–µ—Ä—Ç$"), show_history
            ),            
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, handle_dynamic_button
            ),  # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        ],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthdate)],
            ASK_BIRTHPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthplace)],
            ASK_BIRTHTIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthtime)],
            WAIT_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_wait_answer)],
            CONFIRM_RESET: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_reset)],
        },
        fallbacks=[MessageHandler(filters.Regex("(?i)^–æ—Ç–º–µ–Ω–∏—Ç—å$"), cancel)],
    )

    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.Regex("(?i)^‚óÄ –Ω–∞–∑–∞–¥$"), history_navigation))
    app.add_handler(MessageHandler(filters.Regex("(?i)^–≤–ø–µ—Ä—ë–¥ ‚ñ∂$"), history_navigation))
    app.add_handler(MessageHandler(filters.Regex("(?i)^–º–µ–Ω—é$"), show_menu))
    app.add_handler(MessageHandler(filters.Regex("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), handle_main_menu))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_menu))  # –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è show_menu
    app.add_handler(CommandHandler("help", show_help))  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_help
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CallbackQueryHandler(handle_start_callback, pattern="^/start$"))
    app.add_handler(CallbackQueryHandler(calendar_handler, pattern="^calendar_"))


    
    app.run_polling()

if __name__ == "__main__":
    main()


# %%
