#!/usr/bin/env python
# coding: utf-8

# In[ ]:

from astrology_module import get_astrology_text_for_date, save_user_astrology
from invite_links import create_portrait_invite, build_share_button
import asyncio
import json
import locale
import logging
import random
import re
import sqlite3
import time
from datetime import datetime, timedelta
import threading
import requests
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)
from telegram import ReplyKeyboardRemove
from astrology_module import generate_chart_image
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import BotCommand, MenuButtonCommands
import psycopg2
from telegram.ext import CallbackQueryHandler
from telegram.ext import Application
from simple_calendar import SimpleCalendar, calendar_handler
import os
from dotenv import load_dotenv
from astrology_utils import (
    get_inline_questions,
    get_user_asked_inline_questions,
    log_user_inline_question,
    handle_pre_checkout,
    handle_successful_payment,
    handle_invoice_callback
)
from astrology_utils import get_user_inline_question_texts
from uuid import uuid4
import httpx
from telegram import InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import InlineQueryHandler
from astrology_utils import update_user_balance, get_user_balance, insert_coin_transaction, add_welcome_bonus_if_needed
from yookassa import Configuration, Payment
import uuid
from telegram.ext import PreCheckoutQueryHandler
from dateutil.relativedelta import relativedelta


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –ÆKassa
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")
load_dotenv()
BOT_USERNAME = os.getenv("BOT_USERNAME")
# –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
proxies = {
    "http": None,
    "https": None,
}
logging.basicConfig(level=logging.INFO)

ASK_NAME, ASK_BIRTHDATE, ASK_BIRTHPLACE, ASK_BIRTHTIME, ASK_VIP_DATE, WAIT_ANSWER, CONFIRM_RESET = range(7)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
cancel_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True
)
back_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–ù–∞–∑–∞–¥")], [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True
)
menu_keyboard = ReplyKeyboardMarkup(
    [
        [   KeyboardButton("üîÆ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
            KeyboardButton("‚ù§Ô∏è–£–∑–Ω–∞—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        ],
        [KeyboardButton("üìÖ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"), KeyboardButton("üå† –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [KeyboardButton("üåå–ê—Å—Ç—Ä–æ-–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"), KeyboardButton("ü™û–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫")],
        [KeyboardButton("ü™ô –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –±–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True,
)

def load_static_data():
    global ZODIAC_SIGNS, CHINESE_SIGNS, emoji_dict, zodiac_emojis, chinese_emojis

    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ó–∞–≥—Ä—É–∑–∫–∞ ZODIAC_SIGNS
    cursor.execute("SELECT cutoff_date, name FROM zodiac_signs ORDER BY cutoff_date")
    ZODIAC_SIGNS = cursor.fetchall()  # [(120, "–ö–æ–∑–µ—Ä–æ–≥"), (218, "–í–æ–¥–æ–ª–µ–π"), ...]

    # –ó–∞–≥—Ä—É–∑–∫–∞ CHINESE_SIGNS
    cursor.execute("SELECT name FROM chinese_signs ORDER BY id")
    CHINESE_SIGNS = [row[0] for row in cursor.fetchall()]

    # –ó–∞–≥—Ä—É–∑–∫–∞ emoji_dict
    cursor.execute("SELECT keyword, emoji FROM emoji_mapping")
    rows = cursor.fetchall()
    emoji_dict = {}
    for keyword, emoji in rows:
        emoji_dict.setdefault(keyword, []).append(emoji)

    # –ó–∞–≥—Ä—É–∑–∫–∞ zodiac_emojis
    cursor.execute("SELECT form, emoji FROM zodiac_emojis")
    zodiac_emojis = dict(cursor.fetchall())

    # –ó–∞–≥—Ä—É–∑–∫–∞ chinese_emojis
    cursor.execute("SELECT form, emoji FROM chinese_emojis")
    chinese_emojis = dict(cursor.fetchall())

    conn.close()
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


def get_pg_connection():
    db_url = os.getenv("ASTROLOG_DB")
    if db_url is None:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ASTROLOG_DB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    return psycopg2.connect(db_url)

def create_new_inline_id() -> int:
    conn = get_pg_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT nextval('inline_questions_inline_id_seq')")
            return cursor.fetchone()[0]
    finally:
        conn.close()
        



async def generate_inline_questions_for_user(user_id: int, context, chat_id: int, topic: int):
    name = context.user_data.get("name", "")
    gender = context.user_data.get("gender", "")
    birthdate = context.user_data.get("birthdate", "")
    zodiac = context.user_data.get("zodiac", "")
    chinese = context.user_data.get("chinese_year", "")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞
    if "birthdate" in context.user_data and "user_planets_info" not in context.user_data:
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
            context.user_data["birthdate"],
            time_str=context.user_data.get("birthtime", "12:00"),
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0)
        )

    planets = context.user_data.get("user_planets_info", "")
    
    topic = int(context.user_data.get("topic"))
    if topic ==1: 
        prompt_id = 96
        promt_question_theme = "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è."
    if topic ==2: 
        prompt_id = 97
        promt_question_theme = "–≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –ª—é–±–≤–∏."
    if topic ==3: 
        prompt_id = 98
        promt_question_theme = "–≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç—ã."
    if topic ==4: 
        prompt_id = 99
        promt_question_theme = "–≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ —Å–æ—Ü–∏—É–º–∞."
        
    previous = get_user_inline_question_texts(user_id, topic)
    previous_text = "\n".join(f"- {q}" for q in previous)

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 16 –Ω–æ–≤—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "+ promt_question_theme +
        f"–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –ª–∏—á–Ω—ã—Ö –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
        f"–ò–º—è: {name}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}\n"
        f"–í–æ—Å—Ç–æ—á–Ω—ã–π –∑–Ω–∞–∫: {chinese}\n"
        f"–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:\n{planets}\n\n"
        f"–†–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n{previous_text}\n\n"
        f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 16 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–∏—à–∏ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –±–µ–∑ —Ç–∏—Ä–µ, –±–µ–∑ —Ç–æ—á–µ–∫, –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –í –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '—Ç—ã', –∫–∞–∫ –∫ –¥—Ä—É–≥—É."
    )

    await context.bot.send_message(
        chat_id=chat_id,
        text="üåå –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶ –§–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ‚Ä¶" ,
        reply_markup=ReplyKeyboardRemove()
    )

    payload = {
        "model": "gemma3:latest",
        "prompt": prompt,
        "stream": False,
        "temperature": 0.4,
        "system": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å 16 –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –±–µ–∑ —Ç–æ—á–µ–∫, –±–µ–∑ —Ç–∏—Ä–µ. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ù–µ –Ω–∞—á–∏–Ω–∞–π –Ω–∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å —Å —á–∏—Å–ª–∞ –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–∞. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ '—Ç—ã'."
    }

    try:
        async with httpx.AsyncClient(timeout=500.0, trust_env=False) as client:
            response = await client.post("http://localhost:11434/api/generate", json=payload)
            questions_text = response.json().get("response", "")

        questions = [q.strip("-‚Ä¢ ").strip() for q in questions_text.strip().split("\n") if q.strip()]
        if not questions:
            return

        inline_id = create_new_inline_id()
        conn = get_pg_connection()
        with conn:
            cursor = conn.cursor()
            for index, q in enumerate(questions[:16]):
                cursor.execute("""
                    INSERT INTO inline_questions (inline_id, order_index, question, user_id, gender, prompt_id, topic)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (inline_id, index, q, user_id, gender, prompt_id, topic))

        context.user_data["current_inline_id"] = inline_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline-–≤–æ–ø—Ä–æ—Å–æ–≤: {e}")



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="/Users/denissilyakov/Astrolog/bot/astro_bot.log",  # –ü—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format="%(asctime)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    encoding="utf-8",  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
)

def save_conversation_context(user_id, context):
    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if isinstance(context, str):
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        context = [int(x.strip()) for x in context.strip('[]').split(',') if x.strip().isdigit()]

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
    if len(context) > 1000:
        context = context[-1000:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ç–æ–∫–µ–Ω–æ–≤

    cursor.execute("""
        INSERT INTO user_conversations (user_id, context, timestamp)
        VALUES (%s, %s, %s)
    """, (user_id, json.dumps(context, ensure_ascii=False), datetime.now()))
    
    conn.commit()
    conn.close()


def get_conversation_context(user_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute("""
    SELECT context FROM user_conversations WHERE user_id = %s
    ORDER BY timestamp DESC LIMIT 1
    """, (user_id,))

    context_data = cursor.fetchall()
    conn.close()

    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –µ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if context_data:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        context = []
        for row in context_data:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
            context_values = row[0].strip('[]').split(',')  # —É–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–≤ –∏—Ö –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            context.extend([int(value.strip()) for value in context_values if value.strip().isdigit()])
        return context  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    else:
        return []  # –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_questions(chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
        SELECT question, options, options_position, chain_order FROM question_chains
        WHERE chain_id = %s
        ORDER BY chain_order
        """,
        (chain_id,),
    )

    questions = cursor.fetchall()
    conn.close()
    return questions



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏–∏
def get_dynamic_menu_buttons(menu_chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT button_name, button_action, position FROM dynamic_menu WHERE menu_chain_id = %s
    ORDER BY position
    """, (menu_chain_id,)
    )
    buttons = cursor.fetchall()

    conn.close()
    return buttons

async def user_wait_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    if update.message:
        user_answer = update.message.text.strip()
    elif update.callback_query and update.callback_query.data:
        user_answer = update.callback_query.data.strip()
    else:
        logging.warning("‚ùó –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user_wait_answer.")
        return WAIT_ANSWER
    
    question_step = context.user_data["question_step"]
    chain_id = context.user_data.get("chain_id")
    
    if update.message.text.strip() == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, context)
        return ConversationHandler.END


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è event_answers, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "event_answers" not in context.user_data:
        context.user_data["event_answers"] = {}

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ø–æ—á–∫–∏
    questions = get_questions(chain_id)
    current_question = questions[question_step]

    
    options_str = current_question[1]
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º options –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    context.user_data["current_options_str"] = options_str

    # ‚û°Ô∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    if options_str:
        if "DATE" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime.now() + timedelta(days=1),
                max_date=datetime.now() + relativedelta(years=1)
            )
            await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER

        if "PASTDT" in options_str:
            calendar = SimpleCalendar(
                min_date=None,
                max_date=datetime.now() - timedelta(days=1)
            )
            await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER

        if "BIRTHDT" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime(1925, 1, 1),
                max_date=datetime(2015, 12, 31)
            )
            
            await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=calendar.build_calendar())
            return WAIT_ANSWER
        
        if "LINK" in options_str:
            
            user_id = update.effective_user.id
            link = create_portrait_invite(user_id)
            markup = build_share_button(link)

            await update.message.reply_text(
                f"üîó –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É:\n\n{link}",
                reply_markup=markup
            )

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            context.user_data["question_step"] += 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
            if context.user_data["question_step"] >= len(get_questions(context.user_data["chain_id"])):
                await generate_forecasts_from_chain(update, context)
                return ConversationHandler.END

            return await ask_question(update, context)

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if user_answer == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["question_step"] = 0
        context.user_data["event_answers"]= {}
        question_step = 0
        await show_menu(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATE –≤ options
    if options_str and "DATE" in options_str:
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date <= datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PASTDT –≤ options
    if options_str and "PASTDT" in options_str:
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date > datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BIRHDATE –≤ options
    if options_str and "BIRTHDT" in options_str:
        zodiac, chinese = get_zodiac_and_chinese_sign(user_answer)
        context.user_data["bdate_zodiac"] = zodiac
        context.user_data["bdate_chinese"] = chinese
        if not is_valid_date(user_answer):
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –±—ã–ª–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        try:
            entered_date = datetime.strptime(user_answer, "%d.%m.%Y")
            if entered_date > datetime.now():
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                )
                return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025."
            )
            return WAIT_ANSWER  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥
        
        

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data["event_answers"][question_step] = user_answer
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DATE/PASTDT/BIRTHDT
    if options_str and any(opt in options_str for opt in ["DATE", "PASTDT", "BIRTHDT"]):
        if "planets_info_counter" not in context.user_data:
            context.user_data["planets_info_counter"] = 0
        else:
            context.user_data["planets_info_counter"] += 1

        planets_key = f"planets_info_{context.user_data['planets_info_counter']}"

        planets_info = get_astrology_text_for_date(
            user_answer,
            time_str="12:00",
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0)
        )
        context.user_data[planets_key] = planets_info
    
    if options_str and any(opt in options_str for opt in ["BIRTHDT"]):
        zodiac, chinese = get_zodiac_and_chinese_sign(user_answer)
        context.user_data["bdate_zodiac"] = zodiac
        context.user_data["bdate_chinese"] = chinese


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
    save_answer_to_db(
        update.effective_user.id,
        context.user_data["chain_id"],
        question_step,
        user_answer,
    )
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    context.user_data["question_step"] += 1

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    if context.user_data["question_step"] >= len(questions):
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏—à—ë–ª –æ—Ç callback_query (inline-–∫–Ω–æ–ø–∫–∞), –∞ –Ω–µ message
        if not update.message and update.callback_query:
            update.message = update.callback_query.message  # –ø–æ–¥–º–µ–Ω–∏–º, —á—Ç–æ–±—ã –±—ã–ª–æ –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å chat_id
        
        await generate_forecasts_from_chain(update, context)
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    return await ask_question(update, context)


def save_user_data(user_id, data):
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO users (
            user_id, name, birthdate, gender, zodiac,
            chinese_year, birthplace, tz_offset, birthtime, chat_id
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (user_id) DO UPDATE SET
            name = EXCLUDED.name,
            birthdate = EXCLUDED.birthdate,
            gender = EXCLUDED.gender,
            zodiac = EXCLUDED.zodiac,
            chinese_year = EXCLUDED.chinese_year,
            birthplace = EXCLUDED.birthplace,
            tz_offset = EXCLUDED.tz_offset,
            birthtime = EXCLUDED.birthtime,
            chat_id = EXCLUDED.chat_id
        """,
        (
            user_id,
            data.get("name"),
            data.get("birthdate"),
            data.get("gender"),
            data.get("zodiac"),
            data.get("chinese_year"),
            data.get("birthplace"),
            data.get("tz_offset"),
            data.get("birthtime"),
            data.get("chat_id"),  # <--- –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        ),
    )

    conn.commit()
    conn.close()



def load_user_data(user_id):
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT name, birthdate, gender, zodiac,
               chinese_year, birthplace, tz_offset, birthtime, chat_id
        FROM users WHERE user_id = %s
        """,
        (user_id,),
    )
    row = cursor.fetchone()
    conn.close()

    if row:
        return {
            "name": row[0],
            "birthdate": row[1],
            "gender": row[2],
            "zodiac": row[3],
            "chinese_year": row[4],
            "birthplace": row[5],
            "tz_offset": row[6],
            "birthtime": row[7],
            "chat_id": row[8],   # <--- —á–∏—Ç–∞–µ–º chat_id
        }


    return {}


def decorate_with_emojis(text: str) -> str:
    words = re.findall(r"\w+", text.lower())
    matched_emojis = []
    used_emojis = set()

    for word in words:
        for key in emoji_dict:
            if key in word:
                emojis = [e for e in emoji_dict[key] if e not in used_emojis]
                if emojis:
                    emoji = random.choice(emojis)
                    matched_emojis.append((word, emoji))
                    used_emojis.add(emoji)
                    break

    all_zodiacs = "|".join(re.escape(k) for k in zodiac_emojis)
    all_chinese = "|".join(re.escape(k) for k in chinese_emojis)
    zodiac_pattern = re.compile(r"\b(" + all_zodiacs + r")\b")
    chinese_pattern = re.compile(r"\b(" + all_chinese + r")\b")

    def insert_zodiac_emoji(match):
        return f"{match.group(0)} {zodiac_emojis[match.group(0)]}"

    def insert_chinese_emoji(match):
        return f"{match.group(0)} {chinese_emojis[match.group(0)]}"

    text = zodiac_pattern.sub(insert_zodiac_emoji, text)
    text = chinese_pattern.sub(insert_chinese_emoji, text)

    if not matched_emojis:
        return text

    sentences = re.split(r"(?<=[.!?])\s+", text)
    for i, sentence in enumerate(sentences):
        inserted = 0
        for word, emoji in matched_emojis:
            if inserted >= 3:
                break
            if word in sentence.lower() and emoji not in sentence:
                pattern = re.compile(r"\b" + re.escape(word) + r"\b", re.IGNORECASE)
                sentence = pattern.sub(
                    lambda m: m.group(0) + f" {emoji}", sentence, count=1
                )
                inserted += 1
        sentences[i] = sentence

    return " ".join(sentences)


def get_zodiac_and_chinese_sign(birthdate: str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å
    day, month, year = map(int, birthdate.split("."))
    mmdd = int(f"{month:02}{day:02}")  # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–¥–¥
    zodiac = next(sign for cutoff, sign in ZODIAC_SIGNS if mmdd <= cutoff)
    chinese = CHINESE_SIGNS[(year - 1900) % 12]
    return zodiac, chinese


async def detect_gender(name: str) -> str:
    payload = {
        "model": "gemma3:latest",
        "prompt": f"–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª –∏–º–µ–Ω–∏ ¬´{name}¬ª. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ ¬´–º—É–∂—Å–∫–æ–π¬ª –∏–ª–∏ ¬´–∂–µ–Ω—Å–∫–∏–π¬ª.",
        "stream": False,
        "temperature": 0.4,
        "system": "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π."
    }

    async with httpx.AsyncClient(timeout=10.0, trust_env=False) as client:
        response = await client.post("http://localhost:11434/api/generate", json=payload)
        result = response.json().get("response", "").strip().lower()
        return "–∂–µ–Ω—Å–∫–∏–π" if "–∂–µ–Ω" in result else "–º—É–∂—Å–∫–æ–π"

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
async def warm_up_model():
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        payload = {
            "model": "gemma3:latest",
            "prompt": "–†–∞–∑–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏",
            "stream": False,
            "temperature": 0.7,
            "system": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞"
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        response = requests.post("http://localhost:11434/api/generate", json=payload, proxies=proxies)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            logging.info("–ú–æ–¥–µ–ª—å —Ä–∞–∑–æ–≥—Ä–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏: {response.status_code}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–∏: {e}")

async def process_portrait_invite(start_param, user_id, bot, update, context):
    #"""
    #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ 'portrait_xxx'.
    #–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å 250 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.
    #"""

    token = start_param.strip()
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞")
    
    user_id = update.effective_user.id
    user_data = load_user_data(user_id)




    conn = get_pg_connection()
    try:
        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT creator_id, used FROM portrait_links WHERE token = %s",
                    (token,)
                )
                row = cursor.fetchone()

                if not row:
                    return

                creator_id, used = row

                if used or creator_id == user_id:
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Å—ã–ª–∫–∏
                cursor.execute(
                    "UPDATE portrait_links SET used = true, used_by_user_id = %s, used_at = NOW() WHERE token = %s",
                    (user_id, token)
                )

                if user_data and user_data.get("birthdate") and user_data.get("name") and user_data.get("birthtime"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É
                    # üì¨ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    await bot.send_message(
                        chat_id=creator_id,
                        text=(
                            "üéâ –¢–≤–æ–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å StarTwins!\n"
                            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±–æ–Ω—É—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è.\n"
                            f"–ù–æ –º—ã –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã —Ç–µ–±–µ –∑–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ú–æ–∂–µ—Ç —É —Ç–µ–±—è –µ—â–µ –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å –Ω–∞–º–∏?"
                        )
                    )
                    await update.message.reply_text("–¢—ã –ø—Ä–æ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º, –Ω–æ —Ç—ã —É–∂–µ –∏ —Ç–∞–∫ —Å –Ω–∞–º–∏, —á–µ–º—É –º—ã –±–µ–∑–º–µ—Ä–Ω–æ —Ä–∞–¥—ã!üåü", 
                                                    reply_markup=menu_keyboard)
                    return ConversationHandler.END
                
                # –ù–∞—á–∏—Å–ª—è–µ–º 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤
                bonus_amount = 100
                update_user_balance(creator_id, bonus_amount)

                # ‚¨áÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor.execute("""
                    INSERT INTO coin_transactions (user_id, coin_amount, price_rub, package_id)
                    VALUES (%s, %s, %s, %s)
                """, (creator_id, bonus_amount, 0, 1))

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                new_balance = get_user_balance(creator_id)

    finally:
        conn.close()

    # üì¨ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    await bot.send_message(
        chat_id=creator_id,
        text=(
            "üéâ –ü–æ —Ç–≤–æ–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å +{bonus_amount} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤. üí∞\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô."
        )
    )
    


    #if user_data and user_data.get("birthdate") and user_data.get("name") and user_data.get("birthtime"):
    #    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    #    context.user_data.update(user_data)
    #    context.user_data["chain_id"] = 1
    #    context.user_data["question_step"] = 0
    #    context.user_data["event_answers"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π chat_id –≤ –ë–î
    #    user_data["chat_id"] = update.effective_chat.id
    #    save_user_data(user_id, user_data)

    #    return await ask_question(update, context)

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–º–µ–Ω–∏
    await update.message.reply_text("üåü –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")
    context.user_data["from_compat"] = True
    return ASK_NAME

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    args = context.args
    if args and args[0].startswith("compat_"):
        token = args[0].split("compat_")[1]
        return await handle_compat_start(update, context, token)

    # ‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ "–ó–≤—ë–∑–¥–Ω–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞"
    if args and args[0].startswith("portrait_"):
        token = args[0]  # –Ω–µ –æ—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –æ–Ω –Ω—É–∂–µ–Ω
        #–æ—Ç–ª–∞–¥–∫–∞
        print(token)
        return await process_portrait_invite(token, update.effective_user.id, context.bot, update, context)
    
    user_id = update.effective_user.id
    context.user_data["user_id"] = user_id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logging.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–∞.")
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id
    chat_id = message.chat_id
    context.user_data["chat_id"] = chat_id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_user_data(user_id)
    if user_data:
        context.user_data.update(user_data)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–æ –µ—Å—Ç—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
    if "name" in context.user_data and "birthdate" and "birthplace" in context.user_data:
        context.user_data.setdefault("question_step", 0)
        context.user_data.setdefault("event_answers", {})
        #context.user_data.setdefault("chain_id", 1)
        #context.user_data.setdefault("question_chain_id", 1)


    # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–∞–Ω–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω–µ—Ç —Ä–∞—Å—á—ë—Ç–æ–≤
    if "birthdate" in context.user_data and "user_planets_info" not in context.user_data:
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
            context.user_data["birthdate"],
            time_str=context.user_data.get("birthtime", "12:00"),
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0)
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    if "name" in context.user_data and "birthdate" and "birthplace" in context.user_data:
        await message.reply_text(
            "üëã –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=menu_keyboard,
        )
        return ConversationHandler.END

    # –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
    await message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarTwins!\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_NAME




# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def reset_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ message –∏–ª–∏ callback_query
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logging.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message –¥–ª—è reset_user_data.")
        return ConversationHandler.END

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_text(
        "‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ –±—É–¥–µ—Ç –æ–±–Ω—É–ª—ë–Ω.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–£–≤–µ—Ä–µ–Ω")], [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
        ),
    )
    return CONFIRM_RESET


async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id

    if "—É–≤–µ—Ä–µ–Ω" in text:
        conn = get_pg_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM user_conversations WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM forecasts WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))

        # üí¨ –£–¥–∞–ª–µ–Ω–∏–µ inline-–≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ª–æ–≥–æ–≤
        cursor.execute("DELETE FROM user_inline_logs WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM inline_questions WHERE user_id = %s", (user_id,))
        
        conn.commit()
        conn.close()

        context.user_data.clear()
        context.user_data["chat_id"] = update.effective_chat.id

        await update.message.reply_text(
            "üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NAME


    elif "–æ—Ç–º–µ–Ω" in text:
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–£–≤–µ—Ä–µ–Ω¬ª –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.")
        return CONFIRM_RESET


# –ò–º—è

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["name"] = name
    gender = await detect_gender(name)
    context.user_data["gender"] = gender

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}. –¢–≤–æ–π –ø–æ–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ {gender}."
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    context.user_data["current_options_str"] = "BIRTHDT"
    context.user_data["calendar_center_year"] = 1990
    calendar = SimpleCalendar(
        min_date=datetime(1925, 1, 1),
        max_date=datetime(2015, 12, 31),
        center_year=1990
    )
    await update.message.reply_text(
        "üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—ã–±—Ä–∞–≤ –µ—ë –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=calendar.build_year_selection()
    )
    return context.bot_data["ASK_BIRTHPLACE"]



# –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã
    normalized_date = normalize_and_validate_date(text)

    if normalized_date:
        context.user_data["birthdate"] = normalized_date
        zodiac, chinese = get_zodiac_and_chinese_sign(normalized_date)
        context.user_data["zodiac"] = zodiac
        context.user_data["chinese_year"] = chinese
        save_user_data(user_id, context.user_data)
        
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
        normalized_date,
        time_str=context.user_data.get("birthtime", "12:00"),
        mode="model",
        tz_offset=context.user_data.get("tz_offset", 0)
        )

        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}, –í–æ—Å—Ç–æ—á–Ω—ã–π –∑–Ω–∞–∫: {chinese}.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await update.message.reply_text(
            "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: –¥–µ—Ä–µ–≤–Ω—è –õ–∞–∑—É—Ä–Ω–∞—è, –ö–æ–Ω–∞–∫–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ASK_BIRTHPLACE
    else:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.1990."
        )
        return ASK_BIRTHDATE


async def detect_timezone_offset(place: str) -> int:
    payload = {
        "model": "gemma3:latest",
        "prompt": f"–ö–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+N) —É –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ¬´{place}¬ª? –û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º –æ—Ç -12 –¥–æ +14.",
        "stream": False,
        "temperature": 0.4,
        "system": "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ —á–∏—Å–ª–æ–º ‚Äî —Å–º–µ—â–µ–Ω–∏–µ–º –≤ —á–∞—Å–∞—Ö –æ—Ç UTC, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."
    }

    async with httpx.AsyncClient(timeout=10.0, trust_env=False) as client:
        response = await client.post("http://localhost:11434/api/generate", json=payload)
        try:
            offset = int(response.json().get("response", "0").strip())
            return max(-12, min(14, offset))
        except ValueError:
            return 0

async def get_birthplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    place = update.message.text.strip()
    context.user_data["birthplace"] = place

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    tz_offset = await detect_timezone_offset(place)
    context.user_data["tz_offset"] = tz_offset

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. "
        f"–ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥ –≤ –º–µ—Å—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è: UTC{'+' if tz_offset >= 0 else ''}{tz_offset}\n\n"
        f"üï∞Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú), –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30.\n"
        f"–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª.",
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é", callback_data="birthtime_unknown")]
        ])
    )


    return ASK_BIRTHTIME



# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def forecast_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    tomorrow = datetime.now() + timedelta(days=1)
    context.user_data["forecast_date"] = tomorrow.strftime("%d.%m.%Y")
    context.user_data["chain_id"] = 10
    context.user_data["button_id"] = 100
    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ
    context.user_data["question_step"] = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return await ask_question(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤


# VIP-–¥–∞—Ç–∞
async def ask_vip_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    buttons = get_dynamic_menu_buttons(2)
    context.user_data["forecast_date"] = ""

    if not buttons:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END



# –ò—Å—Ç–æ—Ä–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
async def astro_stages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    #buttons = get_dynamic_menu_buttons(4)

    from astrology_utils import get_pg_connection

    user_id = update.effective_user.id
    context.user_data["forecast_date"] = ""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, button_id FROM astro_psychology_stages ORDER BY position")
    stages = cursor.fetchall()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT current_stage_id FROM user_astro_progress WHERE user_id = %s", (user_id,))
    row = cursor.fetchone()
    current_stage_id = row[0] if row else None

    conn.close()

    context.user_data["current_stage_id"] =  current_stage_id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    lines = [
    "üåå *–¢—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∞–º–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.*",
    "–ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –ê—Å—Ç—Ä–æ-–ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –≥—Ä–∞–Ω–∏ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.",
    "–ü—Ä–æ–π–¥—è –≤–µ—Å—å –ø—É—Ç—å, —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ —Ü–µ–ª–æ—Å—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç,",
    "–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö.",
    "",
    "*–¢–≤–æ–π –ø—É—Ç—å –≤ –ê—Å—Ç—Ä–æ-–ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏:*"
    ]

    buttons = []
    next_stage = None
    passed = True

    for sid, title, bid in stages:
        if current_stage_id is None or sid > current_stage_id:
            if next_stage is None:
                next_stage = sid
                lines.append(f"üü° *{title}* ‚Äî —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
                buttons = get_dynamic_menu_buttons(bid)
            else:
                lines.append(f"üîí {title}")
            passed = False
        else:
            lines.append(f"‚úÖ {title}")

    if passed:
        lines.append("\nüéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —ç—Ç–∞–ø—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è ‚ú®")

    await update.message.reply_text(
        "\n".join(lines),
        parse_mode="Markdown"
    )

    if not buttons:
        #await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END



# –ú–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–∞
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or (update.callback_query and update.callback_query.message)
    if message:
        
        await message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåå –î–æ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏!", reply_markup=menu_keyboard
    )
    return ConversationHandler.END


# –ü–æ–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤ –ë–î –ø—Ä–æ–≥–Ω–æ–∑–∞
async def show_saved_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    forecast_date = context.user_data.get("forecast_date")
    aspect = context.user_data.get("aspect")

    if not forecast_date or not aspect:
        await update.message.reply_text(
            "–ù–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )
        return ConversationHandler.END

    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT text FROM forecasts 
        WHERE user_id = %s AND forecast_date = %s AND aspect = %s
    """,
        (user_id, forecast_date, aspect),
    )
    row = cursor.fetchone()
    conn.close()

    if row:
        decorated = decorate_with_emojis(row[0])
        await update.message.reply_text(
            f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_date} ({aspect}):\n\n{decorated}"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
    return ConversationHandler.END



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
def create_dynamic_keyboard(buttons):
    keyboard = []
    current_row = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
    last_position = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏

    for button_name, button_action, position in buttons:
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ current_row –Ω–µ –ø—É—Å—Ç, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä—è–¥ –≤ keyboard
        if position != last_position and current_row:
            keyboard.append(current_row)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä—è–¥
            current_row = []  # –ù–æ–≤—ã–π —Ä—è–¥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
        current_row.append(KeyboardButton(button_name))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        last_position = position

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
    if current_row:
        keyboard.append(current_row)

    keyboard.append([KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chain_id –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_chain_id_for_button(button_action):
    print("Button Action")
    print((button_action))
    
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT chain_id FROM dynamic_menu
    WHERE button_action = %s
    """,
        (button_action,),
    )

    result = cursor.fetchone()
    conn.close()
    print("get_chain_id_for_button, chain_id")
    print(result)
    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π chain_id
    return None  # –ï—Å–ª–∏ chain_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chain_id –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_button_id_for_button(button_action):
    print("Button Action")
    print((button_action))
    
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT id FROM dynamic_menu
    WHERE button_action = %s
    """,
        (button_action,),
    )

    result = cursor.fetchone()
    conn.close()
    print("get_button_id_for_button, button_id")
    print(result)
    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π chain_id
    return None  # –ï—Å–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
async def handle_dynamic_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é. –ü–æ–ª—É—á–∞–µ—Ç chain_id –∫–Ω–æ–ø–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ user_data,
    #–µ—Å–ª–∏ chain_id –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤.
    
    
    
    button_action = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: {button_action}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º chain_id –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if button_action == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_menu(update, context)

    
    
    chain_id = get_chain_id_for_button(button_action)
    print("handle_dynamic_button, chain_id, button_action")
    print(chain_id)
    print(button_action)
    
    button_id = get_button_id_for_button(button_action)
    

    if chain_id is None:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞! –î–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º chain_id –≤ user_data
    context.user_data["chain_id"] = chain_id
    context.user_data["button_id"] = button_id
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ
    context.user_data["question_step"] = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return await ask_question(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤

async def generate_detailed_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt, tone, temperature):
    user_id = update.effective_user.id

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å message –¥–ª—è reply
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    prompt = replace_variables_in_prompt(prompt, context)
    

    # –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.reply_text(
        "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    #conversation_context = get_conversation_context(user_id)
    conversation_context = '[]'
    
    payload = {
        "model": "gemma3:latest",
        "prompt": prompt,
        "stream": True,
        "temperature": temperature,
        "system": tone
    }

    if conversation_context != '[]':
        payload["context"] = conversation_context

    logging.info(f"[payload] {payload}")

    typing_msg = await message.reply_text("‚Ä¶")

    astro_text = ""
    buffer = ""
    first = True
    timeout = httpx.Timeout(500.0) 
    try:
        async with httpx.AsyncClient(timeout=timeout, trust_env=False) as client:
            async with client.stream("POST", "http://localhost:11434/api/generate", json=payload) as response:
                async for line in response.aiter_lines():
                    if not line.strip():
                        continue
                    part = json.loads(line)
                    chunk = part.get("response", "")
                    if not chunk:
                        continue

                    astro_text += chunk
                    buffer += chunk

                    if "\n" in buffer:
                        parts = buffer.split("\n")
                        for para in parts[:-1]:
                            clean_para = para.strip()
                            if clean_para:
                                decorated = decorate_with_emojis(clean_para)
                                if first:
                                    await typing_msg.edit_text(decorated)
                                    first = False
                                else:
                                    delay = len(clean_para.split()) * 0
                                    await asyncio.sleep(delay)
                                    await typing_msg.edit_text(decorated)
                                    
                                typing_msg = await context.bot.send_message(
                                    chat_id=update.effective_chat.id, text="‚Ä¶"
                                )
                                    
                        buffer = parts[-1]
            try:
                await typing_msg.delete()
            except Exception:
                pass
        last_para = buffer.strip()
        if last_para:
            decorated = decorate_with_emojis(last_para)
            delay = len(last_para.split()) * 0
            await asyncio.sleep(delay)

            try:
                await typing_msg.edit_text(decorated)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        conn = get_pg_connection()
        cursor = conn.cursor()

        aspect = context.user_data.get("aspect", "–ê—Å–ø–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        forecast_date_str = context.user_data.get("forecast_date", "")
        try:
            forecast_date = datetime.strptime(forecast_date_str, "%d.%m.%Y").date()
        except:
            forecast_date = datetime.today().date()

        generate_date = datetime.today().date()
        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–≥–Ω–æ–∑: user_id={user_id}, date={forecast_date}, aspect={aspect}")
        cursor.execute(
            """
            INSERT INTO forecasts (user_id, forecast_date, aspect, forecast_text, generate_date)
            VALUES (%s, %s, %s, %s, %s)
        """,
            (
                user_id,
                forecast_date,
                aspect,
                astro_text,
                generate_date,
            ),
        )
        
        
        conn.commit()
        conn.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        new_context = part.get("context")
        if new_context:
            save_conversation_context(user_id, new_context)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"
async def detailed_vip_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    context.user_data["aspect"]="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"
    
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    buttons = get_dynamic_menu_buttons(3)

    if not buttons:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_dynamic_keyboard(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    return ConversationHandler.END


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    chain_id = context.user_data.get("chain_id")

    if not chain_id:
        await message.reply_text("–û—à–∏–±–∫–∞! –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return ConversationHandler.END

    questions = get_questions(chain_id)
    if not questions:
        await message.reply_text("–û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    question_step = context.user_data.get("question_step", 0)
    current_question = questions[question_step]
    question_text = current_question[0]
    options_str = current_question[1]
    options_position_str = current_question[2]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–ø—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–∏–ø–∞ LINK
    try:
        raw_options = json.loads(options_str) if options_str else []
        options = [opt for opt in raw_options if opt not in {"LINK", "CONTACT"}]
    except json.JSONDecodeError:
        raw_options = []
        options = []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
    try:
        options_positions = json.loads(options_position_str) if options_position_str else []
    except json.JSONDecodeError:
        options_positions = []

    logging.info(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question_text}")
    logging.info(f"–û–ø—Ü–∏–∏: {options}")
    logging.info(f"–ü–æ–∑–∏—Ü–∏–∏: {options_positions}")

    # LINK ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if "LINK" in raw_options:
        from invite_links import create_portrait_invite, build_share_button

        user_id = update.effective_user.id
        link = create_portrait_invite(user_id)
        markup = build_share_button(link)

        await message.reply_text(
            question_text,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )

        await message.reply_text(
            f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}",
            reply_markup=markup
        )

        context.user_data["question_step"] += 1
        questions = get_questions(context.user_data["chain_id"])
        if context.user_data["question_step"] >= len(questions):
            await generate_forecasts_from_chain(update, context)
            return ConversationHandler.END

        return await ask_question(update, context)

    if "CONTACT" in raw_options:
        
        await message.reply_text(
            question_text,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )

        token = str(uuid4())
        initiator_id = update.effective_user.id
        name = context.user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        if "user_planets_info" not in context.user_data:
            context.user_data["user_planets_info"] = get_astrology_text_for_date(
                context.user_data.get("birthdate"),
                time_str=context.user_data.get("birthtime", "12:00"),
                mode="model",
                tz_offset=context.user_data.get("tz_offset", 0)
            )
        
        # üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã
        initiator_data = {
            "name": context.user_data.get("name"),
            "birthdate": context.user_data.get("birthdate"),
            "gender": context.user_data.get("gender"),
            "zodiac": context.user_data.get("zodiac"),
            "chinese_year": context.user_data.get("chinese_year"),
            "user_planets_info": context.user_data.get("user_planets_info"),
            "event_answers": context.user_data.get("event_answers", {}),
            "chain_id": context.user_data.get("chain_id", 100)
        }
        answers_json = json.dumps(initiator_data, ensure_ascii=False)

        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO compatibility_requests (token, initiator_id, initiator_name, initiator_data, compat_type)
            VALUES (%s, %s, %s, %s, %s)
        """, (token, initiator_id, name, answers_json,'romantic'))
        conn.commit()
        conn.close()

        bot_username = context.bot.username
        compat_link = f"https://t.me/{bot_username}?start=compat_{token}"

        text = (
            f"üíû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å StarTwins *{name}* —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏!\n\n"
            f"üìå –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.\n\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑:"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÆ –ü—Ä–æ–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", url=compat_link)]
        ])

        await message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await show_menu(update, context)
        return ConversationHandler.END

    if "FRIENDCON" in raw_options:
        
        await message.reply_text(
            question_text,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )

        token = str(uuid4())
        initiator_id = update.effective_user.id
        name = context.user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        if "user_planets_info" not in context.user_data:
            context.user_data["user_planets_info"] = get_astrology_text_for_date(
                context.user_data.get("birthdate"),
                time_str=context.user_data.get("birthtime", "12:00"),
                mode="model",
                tz_offset=context.user_data.get("tz_offset", 0)
            )
        
        # üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã
        initiator_data = {
            "name": context.user_data.get("name"),
            "birthdate": context.user_data.get("birthdate"),
            "gender": context.user_data.get("gender"),
            "zodiac": context.user_data.get("zodiac"),
            "chinese_year": context.user_data.get("chinese_year"),
            "user_planets_info": context.user_data.get("user_planets_info"),
            "event_answers": context.user_data.get("event_answers", {}),
            "chain_id": context.user_data.get("chain_id", 102)
        }
        answers_json = json.dumps(initiator_data, ensure_ascii=False)

        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO compatibility_requests (token, initiator_id, initiator_name, initiator_data, compat_type)
            VALUES (%s, %s, %s, %s, %s)
        """, (token, initiator_id, name, answers_json,'friendship'))
        conn.commit()
        conn.close()

        bot_username = context.bot.username
        compat_link = f"https://t.me/{bot_username}?start=compat_{token}"

        text = (
            f"üíû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å StarTwins *{name}* —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏!\n\n"
            f"üìå –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —É–≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.\n\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑:"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÆ –ü—Ä–æ–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", url=compat_link)]
        ])

        await message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await show_menu(update, context)
        return ConversationHandler.END

    
    if "INLINEQ" in raw_options:
        try:
            inline_id = int(options[1])  # —Ñ–æ—Ä–º–∞—Ç: ["INLINEQ", "101"]
        except:
            await message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç INLINEQ.")
            return ConversationHandler.END

        topic = int(context.user_data.get("topic"))
        all_questions = get_inline_questions(inline_id,topic)
        asked = get_user_asked_inline_questions(update.effective_user.id, inline_id, topic)
        new_questions = [q for q in all_questions if q not in asked]

        if not new_questions:
            await message.reply_text("‚≠ê –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã.")
            return ConversationHandler.END

        for index, q in enumerate(new_questions):
            await message.reply_text(
                q,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"inline_ask::{inline_id}::{index}")]
                ])
            )


        return ConversationHandler.END


    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∑–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    special_inputs = {"DATE", "PASTDT", "BIRTHDT"}
    if any(opt in special_inputs for opt in raw_options):
        context.user_data["current_options_str"] = options_str

        calendar = None
        if "DATE" in options_str:
            calendar = SimpleCalendar(min_date=datetime.now() + timedelta(days=1), max_date=datetime.now() + relativedelta(years=1))
        elif "PASTDT" in options_str:
            calendar = SimpleCalendar(max_date=datetime.now() - timedelta(days=1))
        elif "BIRTHDT" in options_str:
            calendar = SimpleCalendar(
                min_date=datetime(1925, 1, 1),
                max_date=datetime(2015, 12, 31),
                center_year=2000
            )

        if calendar:
            await message.reply_text(
                "‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            await message.reply_text(
                question_text,
                reply_markup=calendar.build_year_selection()
            )
            return WAIT_ANSWER

    # –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    if not options:
        await message.reply_text(
            f"{question_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
        )
        return WAIT_ANSWER

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if options_positions and len(options) == len(options_positions):
        grouped = {}
        for opt, pos in zip(options, options_positions):
            grouped.setdefault(pos, []).append(KeyboardButton(opt))
        keyboard = [grouped[k] for k in sorted(grouped)]
    else:
        # fallback ‚Äî –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard = [[KeyboardButton(opt) for opt in options]]

    keyboard.append([KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await message.reply_text(question_text, reply_markup=markup)
    return WAIT_ANSWER



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã question_chain_prompts
def get_question_chain_prompts(chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT prompt, tone, temperature, chain_order FROM question_chain_prompts
    WHERE chain_id = %s
    ORDER BY chain_order
    """,
        (chain_id,),
    )

    prompts = cursor.fetchall()

    conn.close()
    return prompts


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ø–æ—á–∫–∏
async def generate_forecasts_from_chain(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    # –ü–æ–ª—É—á–∞–µ–º chain_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chain_id = context.user_data.get("chain_id")
    context.user_data["__tariff_confirmed"] = False
    
    if not chain_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ —É–∫–∞–∑–∞–Ω chain_id.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if int(chain_id) == 10:
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Å–ø–µ–∫—Ç
        answers = context.user_data.get("event_answers", {})
        logging.info(f"[üîç event_answers] {answers}")
        answer_0 = answers.get("0") or answers.get(0, "")

        context.user_data["aspect"] = f"–∑–∞–≤—Ç—Ä–∞, {answer_0}"

        
        forecast_date_str = context.user_data.get("forecast_date", "")
        try:
            forecast_date = datetime.strptime(forecast_date_str, "%d.%m.%Y").date()
        except:
            forecast_date = datetime.today().date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑
        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT forecast_text FROM forecasts
            WHERE user_id = %s AND forecast_date = %s AND aspect = %s
        """, (update.effective_user.id, forecast_date, context.user_data["aspect"]))
        row = cursor.fetchone()
        conn.close()

        if row:
            decorated = decorate_with_emojis(row[0])
            await update.message.reply_text(f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n{decorated}")
            await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
            return ConversationHandler.END

    
# –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if int(chain_id) == 101:
        prompts = get_question_chain_prompts(100)
        result_text = ""

        for prompt, tone, temperature, _ in prompts:
            prompt = replace_variables_in_prompt(prompt, context)
            result_text += prompt + "\n"  # –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        await process_compatibility_result(update, context, result_text)
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        message = update.message or (update.callback_query and update.callback_query.message)        
        if message:
                await message.reply_text(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n"
                "üîÆ –¢–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–±–µ –ø—Ä–∏—à–ª–∞ —Å—Å—ã–ª–∫–∞.\n\n"
                "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å *–ê—Å—Ç—Ä–æ–¢–≤–∏–Ω–∑* ‚Äî –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ.",
                parse_mode='Markdown',
                reply_markup=menu_keyboard
            )       
        user_id = update.effective_user.id
        if add_welcome_bonus_if_needed(user_id):
            update_user_balance(user_id,100)
            await message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô")
        
        return ConversationHandler.END  # ‚ùó –≤–∞–∂–Ω—ã–π return, —á—Ç–æ–±—ã –Ω–µ —à–ª–∏ –¥–∞–ª—å—à–µ
    
# –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if int(chain_id) == 103:
        prompts = get_question_chain_prompts(102)
        result_text = ""

        for prompt, tone, temperature, _ in prompts:
            prompt = replace_variables_in_prompt(prompt, context)
            result_text += prompt + "\n"  # –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        await process_compatibility_result(update, context, result_text)
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        message = update.message or (update.callback_query and update.callback_query.message)        
        if message:
                await message.reply_text(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n"
                "üîÆ –¢–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–±–µ –ø—Ä–∏—à–ª–∞ —Å—Å—ã–ª–∫–∞.\n\n"
                "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å *–ê—Å—Ç—Ä–æ–¢–≤–∏–Ω–∑* ‚Äî –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ.",
                parse_mode='Markdown',
                reply_markup=menu_keyboard
            )       
        user_id = update.effective_user.id
        
        if add_welcome_bonus_if_needed(user_id):
            update_user_balance(user_id,100)
            await message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô")
        
        return ConversationHandler.END  # ‚ùó –≤–∞–∂–Ω—ã–π return, —á—Ç–æ–±—ã –Ω–µ —à–ª–∏ –¥–∞–ª—å—à–µ

    # üìä –ò—â–µ–º –¥–∞—Ç—É –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ —Å –æ–ø—Ü–∏–µ–π [DATE]
    forecast_date_str = context.user_data.get("forecast_date")

    if not forecast_date_str:
        questions = get_questions(chain_id)
        for idx, (_text, options, *_rest) in enumerate(questions):
            if options and "DATE" in options:
                answer = context.user_data.get("event_answers", {}).get(str(idx)) or context.user_data.get("event_answers", {}).get(idx)
                if answer:
                    forecast_date_str = answer
                    context.user_data["forecast_date"]=forecast_date_str
                    break

    if forecast_date_str:
        try:
            buf = generate_chart_image(
                birthdate=forecast_date_str,
                birthtime="12:00",
                tz_offset=context.user_data.get("tz_offset", 0),
                user_name=f"–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ {forecast_date_str}"
            )
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_photo(photo=buf, caption=f"üåå –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ {forecast_date_str}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç: {e}")




    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∑–Ω–∞—á–µ–Ω–∏–π prompt, tone, temperature –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    context.user_data["__prompts_to_generate"] = get_question_chain_prompts(chain_id)
    return await run_prompt_step(update, context)

def is_astro_psychology_chain(chain_id):
    conn = get_pg_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º id –∫–Ω–æ–ø–∫–∏ –∏–∑ dynamic_menu –ø–æ chain_id
    cursor.execute("SELECT menu_chain_id FROM dynamic_menu WHERE chain_id = %s", (chain_id,))
    button = cursor.fetchone()
    
    if not button:
        conn.close()
        return False
    
    button_id = button[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤ astro_psychology_stages
    cursor.execute("SELECT 1 FROM astro_psychology_stages WHERE button_id = %s", (button_id,))
    result = cursor.fetchone() is not None
    
    conn.close()
    return result


async def run_prompt_step(update, context):
    prompts = context.user_data.get("__prompts_to_generate", [])
    
    if not prompts:
        chain_id = context.user_data.get("chain_id")
        # –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if is_astro_psychology_chain(chain_id):
            user_id = update.effective_user.id
            current_stage_id = context.user_data.get("current_stage_id")
            
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∏–ª–∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –µ–¥–µ–Ω–∏—Ü—É –∫ —Ç–µ–∫—É—â–µ–º—É —ç—Ç–∞–ø—É –¥–ª—è –∞–ø–¥–µ–π—Ç–∞
            if current_stage_id is None:
                current_stage_id = 1
            else:
                current_stage_id = current_stage_id+1
                
            
            print(current_stage_id)
            
            conn = get_pg_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO user_astro_progress (user_id, current_stage_id, updated_at)
                VALUES (%s, %s, NOW())
                ON CONFLICT (user_id) DO UPDATE
                SET current_stage_id = EXCLUDED.current_stage_id,
                    updated_at = NOW()
            """, (user_id, current_stage_id))
            conn.commit()
            conn.close()
        
        user_id = update.effective_user.id
        token = create_portrait_invite(user_id)       
        markup = build_share_button(token)
        await update.effective_message.reply_text(
            "üîî –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üîî ‚Äî –∞ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –µ—â—ë –±–æ–ª—å—à–µ? ‚ú® "
            "–ü—Ä–∏–≥–ª–∞—Å–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ ‚ú®\"–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫\" ü™û –∏ –ø–æ–ª—É—á–∏ 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω—Ü–∏–∏ \"üìÖ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ\" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –æ–±—Ä–∞–∑ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ –¥–Ω—è.",
            reply_markup=markup
        )
        
        await update.effective_message.reply_text(
            "–¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é? –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
            reply_markup=menu_keyboard,
        )
        
        return ConversationHandler.END

    prompt, tone, temperature, _ = prompts.pop(0)
    
    #–æ—Ç–ª–∞–¥–∫–∞
    print("run_prompts "+str(prompt))
    
    async def do_forecast():
        await generate_detailed_forecast(update, context, prompt, tone, temperature)
        await run_prompt_step(update, context)  # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    
    # üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–∞—Ä–∏—Ñ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω?
    if context.user_data.get("__tariff_confirmed", False):
        return await do_forecast()
    
    # üëâ –ò–Ω–∞—á–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π
    async def wrapped_forecast():
        context.user_data["__tariff_confirmed"] = True
        return await do_forecast()

    return await confirm_tariff_and_generate(update, context, wrapped_forecast)

#–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞
async def inlinequery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[inlinequery] –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {update.inline_query.query}")
    query = update.inline_query.query
    if query.startswith("portrait_"):
        invite_link = f"https://t.me/{BOT_USERNAME}?start={query}"
        results = [
            InlineQueryResultArticle(
                id=query,
                title="–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –≤ –ó–≤—ë–∑–¥–Ω–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ üåü",
                input_message_content=InputTextMessageContent(
                f"üå† –ò—Å—Å–ª–µ–¥—É–π —Å–µ–±—è –∏ –Ω–∞–π–¥–∏ —Å–≤–æ–µ–≥–æ –∑–≤—ë–∑–¥–Ω–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏\n–ñ–º–∏ üëâ {invite_link}"
                ),
                description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
            )
        ]
        await update.inline_query.answer(results, cache_time=1)



def replace_variables_in_prompt(prompt, context):
    

    user_id = context.user_data.get("user_id")
    print(context.user_data.get("user_id")) #–æ—Ç–ª–∞–¥–∫–∞

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_user_data(user_id)
    if user_data:
        user_data.update(user_data)
        
    print(context.user_data.get("name", "")) #–æ—Ç–ª–∞–¥–∫–∞
    
    if (
        "user_planets_info" not in context.user_data
        and context.user_data.get("birthdate")
    ):
        context.user_data["user_planets_info"] = get_astrology_text_for_date(
            context.user_data["birthdate"],
            time_str=context.user_data.get("birthtime", "12:00"),
            mode="model",
            tz_offset=context.user_data.get("tz_offset", 0) or 0
        )
    
    chain_id = context.user_data.get("chain_id")
    
    if (
        "compat_token" in context.user_data and
        any(s in prompt for s in ["{initiator_", "{responder_}"])
    ):
        load_compat_variables(context, context.user_data["compat_token"])

    # –í—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º event_questions, –µ—Å–ª–∏ –µ—Å—Ç—å chain_id
    if chain_id:
        collect_questions_for_chain(context, chain_id)

    logging.info(f"Event Questions: {context.user_data.get('event_questions')}")
    



    # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    variables = {
        "{name}": context.user_data.get("name", ""),
        "{gender}": context.user_data.get("gender", ""),
        "{forecast_date}": context.user_data.get("forecast_date", ""),
        "{bdate_zodiac}": context.user_data.get("bdate_zodiac", ""),
        "{bdate_chinese}": context.user_data.get("bdate_chinese", ""),
        "{user_planets_info}": context.user_data.get("user_planets_info", ""),
        "{INLINEQ}": str(context.user_data.get("INLINEQ") or ""),
        "{currentdt}": datetime.now().strftime("%d.%m.%Y")
    }

    # --- –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–¥–∞–Ω–æ –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
    if context.user_data.get("birthdate"):
        variables["{birthdate}"] = context.user_data.get("birthdate", "")
        variables["{zodiac}"] = context.user_data.get("zodiac", "")
        variables["{chinese_year}"] = context.user_data.get("chinese_year", "")
    else:
        variables["{birthdate}"] = ""
        variables["{zodiac}"] = ""
        variables["{chinese_year}"] = ""

    # --- –ü–ª–∞–Ω–µ—Ç—ã –Ω–∞ forecast_date ---
    forecast_date_str = context.user_data.get("forecast_date")
    if forecast_date_str:
        if "planets_info_fd" not in context.user_data:
            planets_info_fd = get_astrology_text_for_date(
                forecast_date_str,
                time_str="12:00",
                mode="model",
                tz_offset=context.user_data.get("tz_offset", 0)
            )
            context.user_data["planets_info_fd"] = planets_info_fd

        variables["{planets_info_fd}"] = context.user_data.get("planets_info_fd", "")

        # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ ---
    variables.update({
        "{initiator_name}": context.user_data.get("initiator_name", ""),
        "{initiator_zodiac}": context.user_data.get("initiator_zodiac", ""),
        "{initiator_chinese}": context.user_data.get("initiator_chinese", ""),
        "{initiator_planets}": context.user_data.get("initiator_planets", "")
    })

    # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ ---
    variables.update({
        "{responder_name}": context.user_data.get("responder_name", ""),
        "{responder_zodiac}": context.user_data.get("responder_zodiac", ""),
        "{responder_chinese}": context.user_data.get("responder_chinese", ""),
        "{responder_planets}": context.user_data.get("responder_planets", "")
    })

    # --- –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ ---
    responder_q_keys = [k for k in context.user_data if k.startswith("responder_q_")]
    for k in responder_q_keys:
        i = k.split("_")[-1]
        q_key = f"{{responder_q_{i}}}"
        a_key = f"{{responder_a_{i}}}"
        variables[q_key] = str(context.user_data.get(k, ""))
        variables[a_key] = str(context.user_data.get(f"responder_a_{i}", ""))

    # --- –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ ---
    initiator_q_keys = [k for k in context.user_data if k.startswith("initiator_q_")]
    for k in initiator_q_keys:
        i = k.split("_")[-1]
        q_key = f"{{initiator_q_{i}}}"
        a_key = f"{{initiator_a_{i}}}"
        variables[q_key] = str(context.user_data.get(k, ""))
        variables[a_key] = str(context.user_data.get(f"initiator_a_{i}", ""))

        
    # --- –ó–∞–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    if context.user_data.get("INLINEQ") is None:
        for step in range(len(context.user_data.get("event_questions", []))):
            question = context.user_data["event_questions"][step]
            prompt = prompt.replace(f"{question_key(step)}", str(question))

    # --- –ó–∞–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
    for step, answer in context.user_data.get("event_answers", {}).items():
        prompt = prompt.replace(f"{answer_key(step)}", str(answer))

    # --- –ü–ª–∞–Ω–µ—Ç—ã N ---
    for step in range(0, context.user_data.get("planets_info_counter", -1) + 1):
        planets_key = f"planets_info_{step}"
        planets_info = context.user_data.get(planets_key, "")
        prompt = prompt.replace(f"{{{planets_key}}}", planets_info)
    
        
    # --- –ó–∞–º–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
    for key, value in variables.items():
        #print –æ—Ç–ª–∞–¥–∫–∞
        print("key="+str(key)+"  value="+str(value))
        prompt = prompt.replace(key, value)

    # ‚ùó –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    prompt = prompt.replace("{", "").replace("}", "")
    return prompt


def collect_questions_for_chain(context, chain_id):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –ø–æ chain_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
    –≤ context.user_data['event_questions']. –í–æ–ø—Ä–æ—Å—ã –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è —Å 0.

    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ get_questions(chain_id) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    (question_text, options, options_position, chain_order)
    """
    questions = get_questions(chain_id)

    if not questions:
        logging.error(f"–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Å chain_id {chain_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ chain_order (4-–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî x[3])
    try:
        sorted_questions = sorted(questions, key=lambda x: int(x[3]))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        sorted_questions = questions  # fallback ‚Äî –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    event_questions = {
        index: q[0] for index, q in enumerate(sorted_questions)
    }

    context.user_data["event_questions"] = event_questions
    logging.info(
        f"–°–æ–±—Ä–∞–Ω–æ {len(event_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Å chain_id {chain_id}."
    )



def answer_key(step):
    # –≠—Ç–æ –±—É–¥–µ—Ç {answer_1}, {answer_2} –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    return f"answer_{step}"


def question_key(step):
    # –≠—Ç–æ –±—É–¥–µ—Ç {questions_1}, {questions_2} –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    return f"question_{step}"


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
def save_answer_to_db(user_id, chain_id, question_step, answer):
    retries = 5
    for attempt in range(retries):
        try:
            conn = get_pg_connection()
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT INTO question_chain_answers (user_id, chain_id, question_step, answer)
                VALUES (%s, %s, %s, %s)
            """,
                (user_id, chain_id, question_step, answer),
            )
            conn.commit()
            conn.close()
            break
        except sqlite3.OperationalError as e:
            if attempt < retries - 1:
                time.sleep(1)  # –û–∂–∏–¥–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")
                raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
def is_valid_date(date_str: str) -> bool:
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
def normalize_and_validate_date(date_str: str) -> str:
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for fmt in (
        "%d.%m.%Y",
        "%d-%m-%Y",
        "%d/%m/%Y",
    ):  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        try:
            date_object = datetime.strptime(date_str, fmt)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥
            return date_object.strftime("%d.%m.%Y")
        except ValueError:
            pass  # –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def handle_main_menu(update, context):
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if update.message.text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, context)

def run_model_warmup_in_thread():
    asyncio.run(warm_up_model())

async def get_birthtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ù–µ –∑–Ω–∞—é"
    if update.callback_query and update.callback_query.data == "birthtime_unknown":
        await update.callback_query.answer()
        birthtime = "12:00"
        message = update.callback_query.message
    elif update.message and update.message.text:
        text = update.message.text.strip()
        if text.lower() == "–Ω–µ –∑–Ω–∞—é":
            birthtime = "12:00"
            message = update.message
        else:
            try:
                datetime.strptime(text, "%H:%M")
                birthtime = text
                message = update.message
            except ValueError:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –∑–Ω–∞—é¬ª",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton("–ù–µ –∑–Ω–∞—é")]], resize_keyboard=True
                    )
                )
                return ASK_BIRTHTIME
    else:
        return ConversationHandler.END

    context.user_data["birthtime"] = birthtime

    await message.reply_text(
        f"–ü—Ä–∏–Ω—è—Ç–æ. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birthtime}",
        reply_markup=ReplyKeyboardRemove()
    )

    context.user_data["user_planets_info"] = get_astrology_text_for_date(
        context.user_data["birthdate"],
        time_str=context.user_data["birthtime"],
        mode="pretty",
        tz_offset=context.user_data.get("tz_offset", 0)
    )

    buf = generate_chart_image(
        context.user_data["birthdate"],
        birthtime,
        context.user_data.get("tz_offset", 0),
        context.user_data.get("name", "") + ", —ç—Ç–æ —Ç–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞."
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", callback_data="show_planet_info")]
    ])

    await message.reply_photo(photo=buf, caption="üåå –¢–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
        reply_markup=keyboard)

    context.user_data["chat_id"] = update.effective_chat.id
    save_user_data(user_id, context.user_data)
    save_user_astrology(user_id, context.user_data["birthdate"], birthtime, context.user_data.get("tz_offset", 0))

    if context.user_data.get("compat_chain_id"):
        context.user_data["chain_id"] = context.user_data.pop("compat_chain_id")
        context.user_data["question_step"] = 0
        context.user_data["event_answers"] = {}
        return await ask_question(update, context)

    if add_welcome_bonus_if_needed(user_id):
        update_user_balance(user_id,100)
        await message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô", reply_markup=menu_keyboard)
    else:
        await message.reply_text("–†–∞–¥—ã –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ! ‚ú®üí´ü§ó –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:", reply_markup=menu_keyboard)

    return ConversationHandler.END



async def set_menu(application):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å üöÄ"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã"),
        BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å üë§"),
        #BotCommand("resetdata", "–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üë§‚≠ê"),
        BotCommand("help", "–ü–æ–º–æ—â—å ‚ùì")
    ])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands()
    )

async def setup(application):
    await set_menu(application)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–µ ¬´–ó–≤–µ–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫¬ª.\n"
        "–ñ–º–∏ –∑–¥–µ—Å—å: https://t.me/StarTwins_techsupport_bot . –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ."
    )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = load_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    name = user_data.get("name", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthdate = user_data.get("birthdate", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birthplace = user_data.get("birthplace", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    tz_offset = user_data.get("tz_offset", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ")
    tz_offset_formatted = f"UTC{tz_offset:+}" if tz_offset is not None else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ"

    profile_text = (
        "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"‚Ä¢ –ò–º—è: {name}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
        f"‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
        f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π —Å–¥–≤–∏–≥: {tz_offset_formatted}\n\n"
        "üîß –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?"
    )

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–∞", callback_data="confirm_resetdata"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_resetdata")
        ]
    ])

    await update.message.reply_text(profile_text, reply_markup=keyboard)

async def handle_confirm_resetdata(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback –∏ –≤—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º reset_user_data
    fake_update = Update(
        update.update_id,
        message=update.callback_query.message  # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π update —Å –Ω—É–∂–Ω—ã–º message
    )

    return await reset_user_data(fake_update, context)


async def handle_cancel_resetdata(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)


def get_all_chat_ids():
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM users WHERE chat_id IS NOT NULL")
    chat_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return chat_ids

async def send_update_notification_to_all_chats(application):
    chat_ids = get_all_chat_ids()
    notification_text = (
        "üì¢ –î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n\n"
        "–°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª –µ—â—ë –ª—É—á—à–µ üåü\n"
        "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="/start")]
    ])
    for chat_id in chat_ids:
        try:
            await application.bot.send_message(
                chat_id=chat_id,
                text=notification_text,
                reply_markup=keyboard
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")


async def handle_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
    await start(update, context)

async def send_start_on_launch(app: Application):
    await send_update_notification_to_all_chats(app)

async def full_post_init(application):
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    await setup(application)
    # –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_start_on_launch(application)

async def ask_star_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["forecast_date"] = ""
    keyboard = [
        [InlineKeyboardButton("üßò –û —Å–µ–±–µ", callback_data="theme::1")],
        [InlineKeyboardButton("üíñ –õ—é–±–æ–≤—å", callback_data="theme::2")],
        [InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="theme::3")],
        [InlineKeyboardButton("üåê –°–æ—Ü–∏—É–º", callback_data="theme::4")],
    ]
    await update.message.reply_text(
        "üß≠ –í—ã–±–µ—Ä–∏ —Ç–µ–º–∞—Ç–∏–∫—É –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )  
    
async def handle_question_theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    topic = int(query.data.split("::")[1])
    context.user_data["topic"] = topic   
    user_id = update.effective_user.id
    gender = context.user_data.get("gender", "")
    context.user_data["button_id"] = 99


    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT DISTINCT inline_id FROM inline_questions
        WHERE user_id = %s AND topic = %s
        ORDER BY inline_id DESC LIMIT 1
    """, (user_id, topic))
    row = cursor.fetchone()
    conn.close()


    inline_id = row[0] if row else None

    if inline_id:
        all_questions = get_inline_questions(inline_id,topic)
        asked = get_user_asked_inline_questions(user_id, inline_id, topic)
        new_questions = [q for q in all_questions if q not in asked]
    else:
        new_questions = []

    if len(new_questions) <= 8:
        chat_id=update.effective_chat.id
        await generate_inline_questions_for_user(user_id, context, chat_id, topic)
        inline_id = context.user_data.get("current_inline_id")
        topic = int(query.data.split("::")[1])
        all_questions = get_inline_questions(inline_id,topic)
        asked = get_user_asked_inline_questions(user_id, inline_id, topic)
        new_questions = [q for q in all_questions if q not in asked]

    context.user_data["inline_question_page"] = 0
    context.user_data["inline_questions_available"] = new_questions
    context.user_data["current_inline_id"] = inline_id
    topic = int(context.user_data.get("topic"))
    
    return await show_next_inline_questions(update, context)

async def show_next_inline_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message

    inline_id = context.user_data['current_inline_id']
    topic = int(context.user_data.get("topic"))
    
    #–æ—Ç–ª–∞–¥–∫–∞
    print("show_next_inline_questions, inline_id:" + str(inline_id), " topic:" + str(topic))
    
    all_questions = get_inline_questions(inline_id,topic)
    asked = get_user_asked_inline_questions(update.effective_user.id, inline_id, topic)
    new_questions = [q for q in all_questions if q not in asked]

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ order_index
    available_questions = [
        (i, q) for i, q in enumerate(all_questions)
        if q in new_questions
    ]

    page = context.user_data.get("inline_question_page", 0)
    start = page * 3
    end = start + 3

    if start >= len(available_questions):
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
        page = 0
        start = 0
        end = 3

    current_batch = available_questions[start:end]
    context.user_data["inline_question_page"] = page + 1

    for real_index, q in current_batch:
        await message.reply_text(
            q,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"inline_ask::{inline_id}::{real_index}")]
            ])
        )

    await message.reply_text(
        "üîÅ –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤")],
                [KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
    )

    print("‚úÖ –ó–∞–≤–µ—Ä—à–∞—é show_next_inline_questions")
    return ConversationHandler.END



async def handle_inline_button_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    print("‚úÖ [DEBUG] handle_inline_button_forecast triggered")
    logging.info("‚úÖ [DEBUG] handle_inline_button_forecast triggered")

    _, inline_id_str, index_str = query.data.split("::")
    inline_id = int(inline_id_str)
    question_index = int(index_str)
    topic = int(context.user_data.get("topic"))
    all_questions = get_inline_questions(inline_id,topic)
    if question_index >= len(all_questions):
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    question_text = all_questions[question_index]
    log_user_inline_question(update.effective_user.id, inline_id, question_text, topic)
    context.user_data["INLINEQ"] = question_text
    
    

    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT prompt_id FROM inline_questions
        WHERE inline_id = %s AND order_index = %s
        LIMIT 1
    """, (inline_id, question_index))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.message.reply_text("‚ö†Ô∏è prompt_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    prompt_id = row[0]
    context.user_data["chain_id"] = prompt_id
    
    logging.info("üîÅ –ù–∞—á–∏–Ω–∞–µ–º generate_forecasts_from_chain")
    print(str(context.user_data["chain_id"]))
    await generate_forecasts_from_chain(update, context)
    logging.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ generate_forecasts_from_chain")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ø–æ—á–∫—É prompt-–æ–≤
    #prompts = get_question_chain_prompts(prompt_id)

    #print(f"üëâ prompt_id: {prompt_id}")
    #print(f"üëâ question_text: {question_text}")
    #print(f"üëâ prompts: {prompts}")

    
    #for prompt, tone, temperature, _ in prompts:
        #updated_prompt = replace_variables_in_prompt(prompt, context)
        #print(f"üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ prompt: {prompt}")

        #async def do_inline_forecast():
        #    await generate_detailed_forecast(
        #        update, context,
        #        prompt=updated_prompt,
        #        tone=tone,
        #        temperature=temperature
        #   )
#            await query.message.reply_text(
#                "üîî –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –µ—â—ë –±–æ–ª—å—à–µ? ‚ú® "
#                "–ü–æ–≥—Ä—É–∑–∏—Å—å –≥–ª—É–±–∂–µ –≤ —Å–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ ‚ú® ¬´–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫¬ª ü™û!",
#                reply_markup=menu_keyboard
#            )

    #user_id = update.effective_user.id
    #token = create_portrait_invite(user_id)       
    #markup = build_share_button(token)
    #await query.message.reply_text(
    #            "üîî –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üîî ‚Äî –∞ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –µ—â—ë –±–æ–ª—å—à–µ? ‚ú® "
    #            "–ü—Ä–∏–≥–ª–∞—Å–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ ‚ú®\"–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫\" ü™û –∏ –ø–æ–ª—É—á–∏ 100 –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô "
    #            "–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω—Ü–∏–∏ \"üå† –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\" –∏ –Ω–∞–π–¥–∏ –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.",
    #            reply_markup=markup
    #        )
            
    #await query.message.reply_text(
    #            "–¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é? –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
    #            reply_markup=menu_keyboard,
    #        )


    #await confirm_tariff_and_generate(update, context, do_inline_forecast)

    return ConversationHandler.END

async def handle_compat_start(update: Update, context: ContextTypes.DEFAULT_TYPE, token: str):
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT initiator_name, compat_type FROM compatibility_requests WHERE token = %s", (token,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        return ConversationHandler.END

    initiator_name, compat_type = row
    initiator_name = initiator_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    compat_type = compat_type or "romantic"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π chain_id –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if compat_type == "friendship":
        compat_chain_id = 103
        invite_text = (
            f"{initiator_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –ø—Ä–æ–π—Ç–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!\n"
            f"üìã –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã –Ω–µ —É–≤–∏–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, –µ–º—É –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞."
        )
    else:
        compat_chain_id = 101
        invite_text = (
            f"{initiator_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –ø—Ä–æ–π—Ç–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!\n"
            f"üìã –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã –Ω–µ —É–≤–∏–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, –µ–º—É –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞."
        )

    await update.message.reply_text(invite_text, reply_markup=ReplyKeyboardRemove())

    context.user_data["compat_token"] = token
    context.user_data["compat_chain_id"] = compat_chain_id

    user_id = update.effective_user.id
    user_data = load_user_data(user_id)

    if user_data and user_data.get("birthdate") and user_data.get("name"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É
        context.user_data.update(user_data)
        context.user_data["chain_id"] = compat_chain_id
        context.user_data["question_step"] = 0
        context.user_data["event_answers"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π chat_id –≤ –ë–î
        user_data["chat_id"] = update.effective_chat.id
        save_user_data(user_id, user_data)

        return await ask_question(update, context)

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–º–µ–Ω–∏
    await update.message.reply_text("üåü –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")
    context.user_data["from_compat"] = True
    return ASK_NAME


async def process_compatibility_result(update, context, result_text):
    token = context.user_data.get("compat_token")
    responder_id = update.effective_user.id

    # üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã
    responder_data = json.dumps({
        "name": context.user_data.get("name"),
        "birthdate": context.user_data.get("birthdate"),
        "gender": context.user_data.get("gender"),
        "zodiac": context.user_data.get("zodiac"),
        "chinese_year": context.user_data.get("chinese_year"),
        "user_planets_info": context.user_data.get("user_planets_info"),
        "event_answers": context.user_data.get("event_answers", {}),
        "chain_id": context.user_data.get("chain_id", 101)
    }, ensure_ascii=False)

    if not token:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
        return
    if not result_text.strip():
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π result_text.")
        return

    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute("""
        UPDATE compatibility_requests
        SET responder_id = %s, responder_data = %s, result_text = %s, is_complete = TRUE
        WHERE token = %s
    """, (responder_id, responder_data, result_text, token))

    cursor.execute("SELECT initiator_id FROM compatibility_requests WHERE token = %s", (token,))
    row = cursor.fetchone()
    conn.commit()
    conn.close()

    if row:
        initiator_id = row[0]
        await context.bot.send_message(
            chat_id=initiator_id,
            text="üì© –ü–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"show_compat_result::{token}")]
            ])
        )



async def handle_show_compat_result(update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    token = query.data.split("::")[1]
    
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT compat_type, initiator_id FROM compatibility_requests WHERE token = %s", (token,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.message.reply_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    compat_type, initiator_id = row
    compat_type = compat_type or "romantic"

    await query.message.reply_text("üîÆ –§–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    #context.user_data.clear() -- –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ 
    context.user_data["compat_token"] = token

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º prompt —Ü–µ–ø–æ—á–∫—É
    if compat_type == "friendship":
        prompt_chain_id = 102
    else:
        prompt_chain_id = 100

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ load_compat_variables)
    prompts = get_question_chain_prompts(prompt_chain_id)
    for prompt, tone, temperature, _ in prompts:
        await generate_detailed_forecast(update, context, prompt, tone, temperature)

    message = update.message or (update.callback_query and update.callback_query.message)
    if message:
        await message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)



def load_compat_variables(context, token):
    logging.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ —Ç–æ–∫–µ–Ω—É: {token}")
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT initiator_data, responder_data FROM compatibility_requests WHERE token = %s", (token,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        logging.warning("‚ö†Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    try:
        initiator_data = row[0] if isinstance(row[0], dict) else json.loads(row[0] or "{}")
        responder_data = row[1] if isinstance(row[1], dict) else json.loads(row[1] or "{}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return

    # –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
    context.user_data["initiator_name"] = initiator_data.get("name", "")
    context.user_data["initiator_zodiac"] = initiator_data.get("zodiac", "")
    context.user_data["initiator_chinese"] = initiator_data.get("chinese_year", "")
    context.user_data["initiator_planets"] = initiator_data.get("user_planets_info", "")

    initiator_chain_id = initiator_data.get("chain_id")
    initiator_answers = initiator_data.get("event_answers", {})
    if initiator_chain_id:
        initiator_questions = get_questions(initiator_chain_id)
        for i, (qtext, *_rest) in enumerate(initiator_questions):
            context.user_data[f"initiator_q_{i}"] = qtext
            context.user_data[f"initiator_a_{i}"] = initiator_answers.get(str(i)) or initiator_answers.get(i, "")

    # —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç
    context.user_data["responder_name"] = responder_data.get("name", "")
    context.user_data["responder_zodiac"] = responder_data.get("zodiac", "")
    context.user_data["responder_chinese"] = responder_data.get("chinese_year", "")
    context.user_data["responder_planets"] = responder_data.get("user_planets_info", "")

    responder_chain_id = responder_data.get("chain_id")
    responder_answers = responder_data.get("event_answers", {})
    if responder_chain_id:
        responder_questions = get_questions(responder_chain_id)
        for i, (qtext, *_rest) in enumerate(responder_questions):
            context.user_data[f"responder_q_{i}"] = qtext
            context.user_data[f"responder_a_{i}"] = responder_answers.get(str(i)) or responder_answers.get(i, "")

async def handle_star_twin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from astrology_module import calculate_twins_for_all_categories

    user_id = update.effective_user.id
    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_gender = context.user_data.get("gender", "")
    user_gender_ru = "–º—É–∂—á–∏–Ω–∞" if user_gender == "–º—É–∂—Å–∫–æ–π" else "–∂–µ–Ω—â–∏–Ω–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–≤–æ–π–Ω–∏–∫–∏
    cursor.execute("SELECT COUNT(*) FROM astro_twins WHERE user_id = %s", (user_id,))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()

    if count == 0:
        await update.message.reply_text(
            "–ü–æ–¥–±–∏—Ä–∞—é –∑–≤—ë–∑–¥–Ω—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            reply_markup=ReplyKeyboardRemove()
        )
        await calculate_twins_for_all_categories(user_id, user_gender_ru)

    # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT DISTINCT c.code, c.name
        FROM astro_twins at
        JOIN astro_twin_categories c ON at.twin_category_id = c.id
        WHERE at.user_id = %s
    """, (user_id,))

    categories = cursor.fetchall()
    cursor.close()
    conn.close()

    if not categories:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–≤—ë–∑–¥–Ω—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤.")
        return

    # –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    emoji_map = {
        "inner_world": "üßò",
        "love": "üíò",
        "work": "üíº",
        "society": "ü´Ç"
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏
    keyboard = [
        [InlineKeyboardButton(f"{emoji_map.get(cat_code, '')} {cat_name}", callback_data=f"show_twins_{cat_code}")]
        for cat_code, cat_name in categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üåü –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤—ë–∑–¥–Ω—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ üîÆ",
        reply_markup=reply_markup
    )

async def show_twins_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category_code = query.data.replace("show_twins_", "")
    user_id = update.effective_user.id

    conn = get_pg_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT name FROM astro_twin_categories WHERE code = %s", (category_code,))
    row = cursor.fetchone()
    category_name = row[0] if row else category_code

    # –ü–æ–ª—É—á–∞–µ–º –¥–≤–æ–π–Ω–∏–∫–æ–≤
    cursor.execute("""
        SELECT p.name_ru, at.similarity_score, at.explanation
        FROM astro_twins at
        JOIN pantheon_enriched p ON at.twin_id = p.id
        WHERE at.user_id = %s AND at.category_code = %s
        ORDER BY at.similarity_score DESC
        LIMIT 5
    """, (user_id, category_code))
    twins = cursor.fetchall()

    cursor.close()
    conn.close()

    if not twins:
        await query.message.reply_text("–ù–µ—Ç –¥–≤–æ–π–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    message = f"üå† <b>–ó–≤—ë–∑–¥–Ω—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª:</b>\n\n"
    for idx, (name, score, explanation) in enumerate(twins, 1):
        message += f"{idx}. <b>{name}</b> ‚Äî —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {round(score * 100)}%\n<i>{explanation}</i>\n\n"

    await query.message.reply_text(message.strip(), parse_mode="HTML")





# –ù–æ–≤—ã–π callback –¥–ª—è "–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –±–∞–ª–∞–Ω—Å"
async def show_balance_and_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from astrology_utils import get_user_balance
    user_id = update.effective_user.id
    balance = get_user_balance(user_id)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω—ã ü™ô", callback_data="topup_coins")],
        [InlineKeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data='payment_history')]
    ])
    await update.message.reply_text(
        f"üí∞ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô",
        reply_markup=keyboard
    )

# –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω—ã" –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–∞–∫–µ—Ç—ã
async def handle_topup_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, coin_amount, price_rub, description FROM astrocoin_packages WHERE id < 100 ORDER BY coin_amount")
    packages = cursor.fetchall()
    conn.close()

    if not packages:
        await query.message.reply_text("‚ö†Ô∏è –ü–∞–∫–µ—Ç—ã –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    text_lines = ["üí∞ –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"]
    buttons = []

    for package_id, coin_amount, price_rub, description in packages:
        text_lines.append(f"{description} ‚Äî *{price_rub} ‚ÇΩ*")
        buttons.append([
            InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {coin_amount} ü™ô", callback_data=f"invoice::{package_id}")
        ])

    text_lines.append("\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram.")
    reply_markup = InlineKeyboardMarkup(buttons)

    await query.message.reply_text(
        "\n".join(text_lines),
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

#–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
async def handle_payment_history(update, context):
    query = update.callback_query
    user_id = query.from_user.id

    conn = get_pg_connection()
    cur = conn.cursor()

    cur.execute("""
        SELECT coin_amount, price_rub, timestamp, description
        FROM coin_transactions
        WHERE user_id = %s
        ORDER BY timestamp DESC
        LIMIT 20
    """, (user_id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        text = "üßæ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞."
    else:
        text = "üßæ <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b>:\n\n"
            
        for coin_amount, price_rub, timestamp, description in rows:
            dt = timestamp.strftime("%d.%m.%Y %H:%M")

            if coin_amount < 0:
                text_line = f" –°–ø–∏—Å–∞–Ω–∏–µ {dt} ‚Äî <b>{coin_amount} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤</b>. {description}. \n"
            else:
                text_line = f" –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {dt} ‚Äî <b>+{coin_amount} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤</b> –∑–∞ <b>{price_rub}‚ÇΩ</b>. \n"

            text += text_line


    await query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=await show_menu(update, context)
    )

    return ConversationHandler.END

async def confirm_tariff_and_generate(update, context, next_step):
    from astrology_utils import get_generation_cost, get_user_balance

    user_id = update.effective_user.id
    button_id = context.user_data.get("button_id", 0)
    cost = get_generation_cost(button_id)
    balance = get_user_balance(user_id)
    
    #–æ—Ç–ª–∞–¥–∫–∞
    print("confirm+tariff_ok "+str(button_id)+" —Åost "+str(cost)+"real value button_id = "+str(context.user_data.get("button_id")))
    
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logging.error("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω message –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ confirm_tariff_and_generate")
        return ConversationHandler.END

        # ‚¨áÔ∏è –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
    await message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –ê—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤...", reply_markup=ReplyKeyboardRemove())
    
    if cost == 0:
        return await next_step()

    if balance < cost:
        await message.reply_text(
            f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balance}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_coins")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
            ])
        )
        return ConversationHandler.END

    context.user_data["__next_step"] = next_step
    context.user_data["__tariff_cost"] = cost

    await message.reply_text(
        f"üí∏ –° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è: {cost} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ ü™ô\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_tariff_ok")],
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start")]
        ])
    )

    return ConversationHandler.END


async def handle_confirm_tariff_ok(update, context):


    user_id = update.effective_user.id
    cost = context.user_data.pop("__tariff_cost", 0)
    update_user_balance(user_id, -cost)
    button_id = context.user_data.get("button_id", 0)
    
    insert_coin_transaction(user_id, -cost, 0, package_id=103, description="ID —É—Å–ª—É–≥–∏: "+str(button_id))
    
    callback = context.user_data.pop("__next_step", None)
    if callback:
        await callback()
    else:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        


async def handle_buy_package(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    query = update.callback_query
    await query.answer()

    try:
        _, package_id_str = query.data.split("::")
        package_id = int(package_id_str)
    except Exception:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
    conn = get_pg_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT coin_amount, price_rub FROM astrocoin_packages WHERE id = %s", (package_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.message.reply_text("‚ö†Ô∏è –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    coin_amount, price_rub = row
    user_id = update.effective_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    try:
        payment = Payment.create({
            "amount": {
                "value": f"{price_rub:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{context.bot.username}?start=thank_you"
            },
            "capture": True,
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {coin_amount} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤ (user_id={user_id})",
            "metadata": {
                "user_id": str(user_id),
                "coin_amount": str(coin_amount),
                "package_id": str(package_id)
            }
        }, uuid.uuid4())

        payment_url = payment.confirmation.confirmation_url

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—Ä–∫–∏ –≤ –≤–µ–±—Ö—É–∫–µ
        conn = get_pg_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO pending_payments (payment_id, user_id, coin_amount, price_rub, package_id)
            VALUES (%s, %s, %s, %s, %s)
        """, (payment.id, user_id, coin_amount, price_rub, package_id))
        conn.commit()
        conn.close()

        await query.message.reply_text(
            f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ *{coin_amount} –ê—Å—Ç—Ä–æ–ö–æ–∏–Ω–æ–≤* –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", url=payment_url)]
            ])
        )

    except Exception as e:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[–ÆKassa] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

    async def handle_show_planet_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        planet_text = context.user_data.get("user_planets_info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await query.message.reply_text(f"üî≠ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:\n\n{planet_text}")

        context.user_data["chain_id"] = 104
        context.user_data["question_step"] = 0
        context.user_data["event_answers"] = {}

        await generate_forecasts_from_chain(update, context)

async def handle_show_planet_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    planet_text = context.user_data.get("user_planets_info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await query.message.reply_text(f"üî≠ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:\n\n{planet_text}")

    context.user_data["chain_id"] = 104
    context.user_data["question_step"] = 0
    context.user_data["event_answers"] = {}
    context.user_data["button_id"] = 100
    await generate_forecasts_from_chain(update, context)



# –ó–∞–ø—É—Å–∫
def main():
    
    load_static_data()  # <--- –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ë–î
    
    # --- –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling --- –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏
    async def startup_tasks():
        await send_update_notification_to_all_chats(app)
    
    app = (
        ApplicationBuilder()
        .token(os.getenv("ASTROLOG_BOT"))
        .concurrent_updates(True)
        .post_init(full_post_init)  # <<< –í–û–¢ –¢–£–¢ –î–û–ë–ê–í–õ–Ø–ï–ú
        .build()
    ) 
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ bot_data –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    app.bot_data["save_answer_to_db"] = save_answer_to_db
    app.bot_data["ask_question"] = ask_question
    app.bot_data["ASK_BIRTHPLACE"] = ASK_BIRTHPLACE
    app.bot_data["save_user_data"] = save_user_data


    # –ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    threading.Thread(target=run_model_warmup_in_thread).start()
    
    

    # –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler
    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(reset_user_data, pattern="^confirm_resetdata$"),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞$"), forecast_tomorrow
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–£–∑–Ω–∞—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏$"), ask_vip_date
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ$"), reset_user_data
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ$"),
                detailed_vip_forecast,
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ê—Å—Ç—Ä–æ-–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è$"), astro_stages
            ),            
            MessageHandler(
                filters.Regex(r"(?i)^/resetdata$"), reset_user_data  # ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å$"), ask_star_question
            ),
            MessageHandler(filters.Regex("(?i)^–ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤$"), show_next_inline_questions
            ),
            MessageHandler(
                filters.Regex(r"(?i)^.{1,2}–ó–≤—ë–∑–¥–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫$"), handle_star_twin_menu
            ),
            MessageHandler(filters.Regex(r"(?i)^.{1,2}–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –±–∞–ª–∞–Ω—Å$"), show_balance_and_subscription
            ), 
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, handle_dynamic_button
            ),

        ],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthdate)],
            ASK_BIRTHPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthplace)],
            ASK_BIRTHTIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthtime),
                CallbackQueryHandler(get_birthtime, pattern="^birthtime_unknown$"),
            ],
            WAIT_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_wait_answer)],
            CONFIRM_RESET: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_reset)],

        },
        fallbacks=[MessageHandler(filters.Regex("(?i)^–æ—Ç–º–µ–Ω–∏—Ç—å$"), cancel)],
    )

    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.Regex("(?i)^–º–µ–Ω—é$"), show_menu))
    app.add_handler(MessageHandler(filters.Regex("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), handle_main_menu))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_menu))  # –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è show_menu
    app.add_handler(CommandHandler("help", show_help))  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_help
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CallbackQueryHandler(handle_start_callback, pattern="^/start$"))
    app.add_handler(CallbackQueryHandler(calendar_handler, pattern="^calendar_"))
    app.add_handler(CallbackQueryHandler(handle_cancel_resetdata, pattern="^cancel_resetdata$"))
    app.add_handler(CallbackQueryHandler(handle_inline_button_forecast, pattern="^inline_ask::"))
    app.add_handler(CallbackQueryHandler(handle_show_compat_result, pattern="^show_compat_result::"))
    app.add_handler(CallbackQueryHandler(handle_topup_coins, pattern="^topup_coins$"))
    app.add_handler(CallbackQueryHandler(handle_confirm_tariff_ok, pattern="^confirm_tariff_ok$"))
    app.add_handler(CallbackQueryHandler(handle_buy_package, pattern="^buy_package::"))
    app.add_handler(InlineQueryHandler(inlinequery))
    app.add_handler(CallbackQueryHandler(handle_question_theme_choice, pattern="^theme::"))
    app.add_handler(CallbackQueryHandler(handle_payment_history, pattern="^payment_history$"))
    app.add_handler(CallbackQueryHandler(handle_invoice_callback, pattern="^invoice::"))
    app.add_handler(PreCheckoutQueryHandler(handle_pre_checkout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment))
    app.add_handler(CallbackQueryHandler(handle_show_planet_info, pattern="^show_planet_info$"))
    app.add_handler(CallbackQueryHandler(show_twins_by_category, pattern=r"^show_twins_"))

    
    app.run_polling()

if __name__ == "__main__":
    main()


# %%
